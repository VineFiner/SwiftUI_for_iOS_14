- [Meng] Hi, my name is Meng I'm from Design+Code, and welcome to my SwiftUI course for iOS 14. For the first time ever, we're going to build a multi-platform app for iOS, iPadOS, and macOS using only SwiftUI, and the same techniques and minimal code change, you're gonna be able to make your code work across platforms. Starting with iOS, we're going to embrace the sidebar navigation, which means that this translate well to the Mac App. For the iPhone, we're going to use the tab bar, which is really good for navigation and adaptive layout so you can easily switch between landscape mode and portrait mode, and your layout will still look great. The sidebar allows you to have a lot of navigation items. But also you can toggle between, on and off. And because we're using the new Lazy Grid, we're gonna be able to make our layout adaptive. So the bigger the screen, the more columns we can have. We're also going to use the new Matched Geometry Effect, which allows you to transition between views. And for the new view, you can have scrolling, and more navigation such as the modal all of these animations will work on all platforms, such as the iPad, and in this case, we're able to put it on top of the sidebar. But if not, we can also have a different type of animation that exists within its own container. And thanks to the Lazy Grid, we're gonna be able to switch between modes such as this and apply some 3D animation, as we scroll. At the same time, the transition will still work and you will have scrolling as well as the modal behavior. These animations will also adapt perfectly to the device. So for the iPhone, we're gonna have a single column and the cards will stack more closely. Then we're gonna learn more animations. So in this case, we're gonna stack the cards like this. And you can flip the card and have that animation for each of the card. Again, it's going to work for the iPhone as well. And we're gonna make it adapt to the screen size with transition. Using the accent color and the preset colors, your app will automatically adapt for dark mode, and there's no code change. Likewise, for the Mac, you can switch to light mode, and it will still look great with the translucent menu and the accent color. Since we're using dynamic type, the text will translate perfectly depending on the platform. So for example, on the Mac, it's going to be slightly smaller, and the modal is going to look like this. It can be bigger as well. And we can have multiple site navigation and the grid layout as well as the padding and round corners will adapt to the platform. So in this course, we're gonna look at different types of navigation such as the default one, which can go very deep. And works across platform, we can have multilevel menus, or depending on content, we can go with a modal route, and it can go as deep as you want. We will also prototype custom animations such as this, and be able to use static data, so you can search and easily filter. We're also going to build a widget together so that we can showcase key content on the home screen. Finally, we're gonna learn how to structure our app in terms of files, folders and assets. So with this, I hope you're excited to build your first iOS 14 app. In order to follow this course you're going to need Xcode 12. So go to www.developer.apple.com and then you can find Xcode 12. And at the bottom of the page, you will find download Xcode 12. This is where you're going to log in with your Apple ID, it doesn't have to be a paid membership in the Beta download page, you're gonna go to applications and download Xcode 12 beta 2. Now SwiftUI has been pretty stable over the past 10 months. So even if you're on a new beta, it should be working fine. But I will be providing the source files for each beta. So after you download this, I highly recommend that you download macOS Big Sur. If you wanna be able to test the Mac App and develop for macOS, you will need Big Sur. But otherwise, if you only wanna focus on iOS and iPad, the lessons provided and the code should be working fine. However, there might be some inconsistencies. But I do wanna point out that from my experience, and from the comments that I've read, Big Sur is very stable. However, when you install it, you should definitely backup, partition, or simply install on the non production machine. The source files are provided from section two or in the download section of www.designcode.io. Here, you will find the source files for the final app that I've shown you and for each section of the course, so that you can compare your code against mine. Also, please make sure to re download the files whenever you have a newer beta, and I will do my best to update the code if there is any breaking change. I also provided the design template, so you can definitely look into how I organize my design for iOS for iPad, and as well for the icons. This is also a great template for your app. So you can put your app icon in a component and it will automatically update all of these icons, so that you can export with the correct names and resolutions. As you design for the Apple platforms, you should download the SF Pro fonts for iOS, iPadOS and tvOS, SF Compact for watchOS, SF mono which is optional, but great for code highlighting, and New York which is a serif typeface. Finally for the icons, you should download the SF Symbols app from Apple. And here you're gonna click on SF Symbols to find the beta for SF Symbols 2 the new SF Symbols 2 has over 2400 icons in different stroke width. And also, you can have multicolor now, to use these icons in SwiftUI, you don't need to import anything, you can just put the name of the icon into the SwiftUI code. All right, so let's get started. Now we're gonna open Xcode. And here we're gonna create a new Xcode project. Here, we're gonna go to multi platform click on App and click on Next. We're going to name it Design Code Course. And then click on Next. Let's save that to downloads with Creating Git repository on my Mac enabled. Then click on Create. Now you have in front of you a new Xcode project, you can double click on the tab bar to maximize it. Now we have the navigator on the left side with shared, which is for both iOS and macOS code. But also you can have platform specific code for iOS and macOS, which I will explain later. But for now, we're going to focus on shared and we will make sure that our code will work on all platforms. So in the past SwiftUI projects, we had the App delegate.swift file, but now this has been replaced by DesignCodeCourse App, which is referencing to content view and content view is your first screen. We'll come back to this in the next session. But for now, we're gonna set up the assets in Xcode 12, we have the accent color now, which is a single color that will tint your app text buttons as well as the navigation selected states. Now it is recommended to have have appearances for both light and dark. So in light mode, it's going to be slightly darker, which makes the contrast better. And likewise for dark mode, the color is going to be lighter for better contrast. For the App Icon, It's exactly as before, except now we have a Mac section. This part is optional, since I already prepared the assets for you. If you wanna create a custom icon, I prepared this template in Figma. And you can just update the component and then you can export the file. So we're gonna put it in downloads, and then all you need to do is to select all the iPhone assets and drag and drop right here where you see all the blue squares. Since this can be a bit time consuming to make sure that all the resolutions are correct and all the colors, are correct for both light and dark mode, I prepared this part for you. So we're just gonna replace it by deleting both the App Icon and the accent color. We're gonna go to the assets folder to find assets. And here on all of these folders, we're just gonna drag and drop directly to this space here. As I mentioned before, we have accent color for light mode and dark mode. And then the App Icon we have for iPhone, iPad, and Mac, as well as the App Store. Then I set up a bunch of colors that we can use for the app. So here, you can navigate it like this, or you can go to the folders and you can find the different colors. So background, one to five primary secondary for both light mode and dark mode. And then we have a bunch of images, which can be in SVG format. So previously, we could only use PDF as well as PNG. But now we can also use SVG for icons and vector illustrations SVG is great. For images that is a mix of vector and bitmap, as well as complex gradients or masking, I recommend PDF. If you want pixel perfection, but at a cost of large file size, you can definitely use PNG. And if it doesn't have transparency, then you can use JPEG. Otherwise, don't worry too much about these because these assets are already prepared for you. And we'll learn as we go. Now we're gonna to go to the Content View, and we can finally start coding in SwiftUI. So I'll see you, in the next session.