- [Meng] Hi, Welcome to a second session, of my SwiftUI course. In this session, we're going to learn how to create a very basic cart design using SwiftUI new visual editing tools. Now the first thing we're going to do is to resume our preview. This might take a couple minutes if you're doing it for the first time. And so when it's loaded, this is a visual representation of your code here. And the device itself can be changed by going to the device list here. We can change that for iOS 11 Pro. And so today, we're not even going to touch the code at all. We're just gonna click on the elements and then go to the inspector, and this is where you can customize your elements appearance. Now the inspector has a bunch of tabs, so, make sure that you are on the fourth one that says, the Attributes Inspector. And so you can change the styling of the element that you have selected. You can also double click on the element to directly edit the text. So we're going to change that to SwiftUI. And notice that when we change the text here, or the text here, or the text here, it's all synchronizing perfectly, so I can even edit here, so for iOS 14, and press Enter. Now let's change the font. And when we click on the menu, we have access to the dynamic type. If you're not familiar with the iOS design guidelines, I highly suggest that you go to the visual design part in typography. And here if you scroll down a little bit, you're going to find all the dynamic type sizes for title one, two, three, headline, body, and so on. And what is interesting is that if you use this, it's going to adapt automatically to different accessibility options. And not only that, it will adapt to the platform, so, a title on a Mac will be slightly smaller than a title in iOS. So you should absolutely use dynamic type because it will save you time, but also, it will make it adaptive across platforms. So here, we're just going to go and set it to body, but body is also set by default. So, you can also select inherited. For the font weight, we're going to set it to bold, then we're going to create a second text. So, you can just select this and then Command D to duplicate and it will automatically duplicate the first layer into a second one. But not only that, but it will create a container called a VStack, which is a vertical stack, that can align and stack its inner elements using consistent spacing. Just like a design tool, you can select one of the elements visually, or if the elements are overlapping, you can go to the code directly, and it's going to select, let's say the VStack. Now I'm going to double click the second text and change it to 20 sections. And here, notice that the elements are centered by default. So if you wanna change that, we're gonna select the container, which is a VStack, and then we can go to alignment to the left. In terms of padding, we can select the element. And we're gonna go to the padding area, and you can see here that we have some values by default. And you can click on this to remove it. So now it does not have any padding anymore. We're gonna do the same for the second text and remove it. Let's change the font to footnote, and then we're going to remove the bold, and by clicking on the blue button here. So you can see here that between these two elements, we would like to have some padding but we don't necessarily want to have manual padding, which is not the most optimal way to do it. And instead, we should go to the container, which is the VStack, and set the spacing instead. So we're gonna go to the spacing value and set it to four, and Enter. Different from a padding which surrounds an element, the spacing is a gap between the elements within a stack. Okay, so let's talk about colors. Just like dynamic type, you should avoid using custom colors, unless, you have a custom background that will exist the same way between light and dark mode. So because I haven't set a color for the title, it will set itself to primary, which is going to be black in light mode, and then white in dark mode. Now you have access to a bunch of preset colors. So for example, I'm going to select on the subtitle. And I can click on color. And here you're going to find a bunch of preset colors that adapts automatically. So for example, red is different between light and dark mode. But also you have your custom assets catalog colors that we have set earlier. So if you want a custom color, make sure that it's set in your assets catalog. And if you want to use one of the preset colors by Apple, you can go to the iOS guidelines, and you scroll down a little bit, you're going to find the different colors for light and dark mode. So back to our app, we're going to select the container, and then we're going to add a background color. But here you can see that there is no background color in the inspector. In fact, there are hundreds missing. And each of these properties is called a modifier, and you can add custom ones by going to this field at the bottom. Unfortunately, during this version of the beta, it's not available from here, but you can definitely go to the plus sign. And this is what we call the Insert menu. So you have the controls which is the Button, Date Picker, Form, etcetera. And then you have the modifiers, which are the properties the styling. So we're gonna search for background. And here, where we find background, we're going to drag and drop directly to the inspector like this. Make sure you're applying to the right element. In this case, I have the vertical stack selected. And notice that as soon as I did that, I have a new property, and I can change the color. For some reason, after we added the background color, the modifiers are working now. So we're going to search for corner, and select on corner radius. Let's change the number to 20. And let's add a little bit of padding. So I'm gonna go to the padding and click on the circle on the right side, and this will apply a default of 16 points on all sides. Let's add another modifier. This time it's going to be called shadow. Great. Now we want to add an image at the top of the text. So, we're going to go to Insert again. And we're going to go to images. And this is from my assets catalog, I'm going to select the first one. So, illustration one. Drag and drop directly to the preview, and here I can target any part that I want. So, middle top, bottom of the text, or even to the left. So in this case, I'm going to do it at the top of the title, and it's going to look like this. If you look at the structure of the code, we have the VStack, and then we have three elements inside the VStack. Now you can see that the image is a little bit too big. And that's because SwiftUI always take the original size of the image. And so what you need to do to fix that is to add a modifier. While having the image selected, I'm going to type with sizeable and select. This will make sure to resize the image and use all available space. And in this case, the image doesn't have the right ratio. So there's another modifier. So we're gonna type ratio and select aspect ratio. And now it tries to fit within the bounds using fill. And you can switch to fit instead, like this. So, this technique is great because that means that the image will always resize, based on the maximum width or height of the card. So, if I was to click on the VStack, and set the height to let's say, 200, you're gonna see that the inner elements are going to try to resize. And this is really good, when it comes to making your layout adaptive across devices. At the end of the day, you want to create this component to adapt to any number of columns and rows. Which is why we don't really want to set a fixed frame. So we're gonna remove that 200 of height. Another feature that is new in Xcode 12 is that you can duplicate the preview. And for each preview, you can select on the options, to change the device, the layout, the color scheme, and the accessibility options such as, extra extra large text for example. In this case, we're gonna select dark mode. Now you can zoom out and you can see that my text here is changing colors based on light and dark mode. So, because I haven't set a color, it's set to black by default, and for dark mode, it's set to white. Now as I mentioned before, you don't really want to set custom colors unless, you have a custom background, that is always, let's say blue for both light and dark mode, in which case, you can always make, let's say the text to be white. I'm gonna select the first text and set it to white. Let's do the same for the second text as well. So now both cards are consistent. One other thing that I want to point out is that the inspector is available here, but can also be available directly on a preview. So you can Command click on the element to go to, Show SwiftUI Inspector, and these options will be exactly the same as these. There is a shortcut without having to do two clicks. So you can do Control option and select. It's going to go directly to the inspector. The same for the preview. So, if I select the preview itself, it's going to show me the options right here instead of here. Now, let me change the preview. I'm going to go to layout and change to fixed. This is where I'm going to set, let's say 200 of width by 200 of height. So now I can see what it's going to look like, if my layout or device is this size. I'm also noticing that there's a bit of a gap here, and maybe I want to set my card to take the whole screen vertically as well. And for that, I'm going to need to set a spacer. A spacer is not a modifier. It's an element that push the container to take the full space. So let me click on the plus sign. I'm going to go to controls and search for spacer. Here, I'm going to drag and drop. And again, anywhere I want. In this case, let's say at the top of the image. And when I do that, you can see that it's pushing the entire cart to take the available space at the position that I put here. Now you're seeing a little bit of a gap here, that's the safe area, and that has nothing to do with your cart. This is device dependent, and we can take care of that later. So taking care of this gap, what we can do is the same thing. So, we're going to click on a plus sign, search for spacer, and drag and drop right to the left of the image like this. Now, because we're pushing on one side, the image is no longer centered so we need another spacer to the right side as well. And there's a shortcut for the Insert, which is Shift Command and L, and again, search for spacer, drag and drop to the right side of the image. Looking at the image, you can see that it's now inside a horizontal stack, and it has a space to the left and to the right. And it's pushing the cart to take the full width of the screen. So now I just created a cart that is fully adaptive for all screens sizes, and I can even make it repeat, let's say in a grid layout or in a list layout. Before we finish, I just want to mention that even though this is great to use the inspector, and to use the preview, using drag and drop, please keep in mind that you will miss some options and you won't have as much control as much as in code. And also, you shouldn't leave these values blue. So we're just gonna double click them. Now for the background, it becomes empty. And so inside the parentheses, we're gonna type color dot blue. Let's do the same for the two numbers here. All right, so today I wanted to show you all the new options for the visual editing tools of SwiftUI. And this is especially great for beginners, for designers, for prototyping. So if you have co-workers who have never touched SwiftUI this is a great introduction to Xcode and to SwiftUI. In the next session, we're going to learn about SF symbols and how to use list styles. So I'll see you in the next session.