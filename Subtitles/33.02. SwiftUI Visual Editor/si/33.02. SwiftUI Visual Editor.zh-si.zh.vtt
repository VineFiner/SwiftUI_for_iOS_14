WEBVTT

1
00:00:06.242 --> 00:00:10.725
SwiftUI 2 SwiftUI 视觉编辑器
了解Xcode 12的新视觉编辑和检查器工具

2
00:00:12.640 --> 00:00:14.530
<v 明>大家好，欢迎参加我的SwiftUI课程</v>

3
00:00:14.530 --> 00:00:16.180
第二章

4
00:00:16.180 --> 00:00:17.013
在这个章节中

5
00:00:17.013 --> 00:00:19.940
我们将学习如何使用SwiftUI

6
00:00:19.940 --> 00:00:23.740
新的可视化编辑工具创建非常基本的购物车设计。

7
00:00:23.740 --> 00:00:25.540
现在我们要做的第一件事

8
00:00:25.540 --> 00:00:28.150
是恢复我们的预览。

9
00:00:28.150 --> 00:00:30.050
这可能需要几分钟

10
00:00:30.050 --> 00:00:32.600
如果您是第一次这样做。

11
00:00:32.600 --> 00:00:33.840
在加载后，

12
00:00:33.840 --> 00:00:37.290
这是您的代码的直观表示。

13
00:00:37.290 --> 00:00:38.700
设备本身

14
00:00:38.700 --> 00:00:41.790
是可以通过转到此处的设备列表进行更改。

15
00:00:41.790 --> 00:00:45.980
我们可以针对iOS 11 Pro进行更改。

16
00:00:45.980 --> 00:00:48.710
今天，我们甚至根本不打算修改代码。

17
00:00:48.710 --> 00:00:51.670
我们只是要点击元素

18
00:00:51.670 --> 00:00:53.520
然后去检查员

19
00:00:53.520 --> 00:00:55.820
这是您可以自定义的地方

20
00:00:55.820 --> 00:00:57.310
您的元素外观。

21
00:00:57.310 --> 00:00:59.350
现在检查员有很多标签，

22
00:00:59.350 --> 00:01:02.800
因此，请确保您在第四个提示您的位置上，

23
00:01:02.800 --> 00:01:04.670
属性检查器。

24
00:01:04.670 --> 00:01:07.660
这样您可以选择

25
00:01:07.660 --> 00:01:09.300
可以更改元素的样式

26
00:01:09.300 --> 00:01:11.690
您也可以双击元素

27
00:01:11.690 --> 00:01:14.490
直接编辑文本。

28
00:01:14.490 --> 00:01:17.020
因此，我们将其更改为SwiftUI。

29
00:01:17.020 --> 00:01:20.230
请注意，当我们在此处更改文字时，

30
00:01:20.230 --> 00:01:21.680
或这里的文字，

31
00:01:21.680 --> 00:01:23.100
或这里的文字，

32
00:01:23.100 --> 00:01:25.900
一切都完美地同步了，

33
00:01:25.900 --> 00:01:30.340 line:15% 
所以我甚至可以在这里编辑，所以是对iOS 14

34
00:01:30.340 --> 00:01:31.510
然后按输入。

35
00:01:31.510 --> 00:01:33.200
现在，让我们更改字体。

36
00:01:33.200 --> 00:01:35.500
当我们点击菜单时

37
00:01:35.500 --> 00:01:37.550
我们可以访问动态类型。

38
00:01:37.550 --> 00:01:39.810
如果您不熟悉iOS设计指南，

39
00:01:39.810 --> 00:01:43.340
我强烈建议您进入在排版中

40
00:01:43.340 --> 00:01:45.100
的视觉设计部分。

41
00:01:45.100 --> 00:01:46.680
在这里，如果您向下滚动一点，

42
00:01:46.680 --> 00:01:50.080
您将找到所有动态类型的大小

43
00:01:50.080 --> 00:01:54.370
标题1，2，3，大标题，正文等。

44
00:01:54.370 --> 00:01:57.570
有趣的是，如果您使用此功能，

45
00:01:57.570 --> 00:01:59.970
它会自动适应

46
00:01:59.970 --> 00:02:02.690
到不同的辅助功能选项。

47
00:02:02.690 --> 00:02:05.270
不仅如此，它将适应平台，

48
00:02:05.270 --> 00:02:09.070
因此，Mac上的标题会稍小

49
00:02:09.070 --> 00:02:10.970
而不是iOS中的标题。

50
00:02:10.970 --> 00:02:13.530
所以你绝对应该使用动态类型

51
00:02:13.530 --> 00:02:15.360
因为它将节省您的时间，

52
00:02:15.360 --> 00:02:19.500
这将使其跨平台具有适应性。

53
00:02:19.500 --> 00:02:22.680
所以在这里，我们将其设置为主体，

54
00:02:22.680 --> 00:02:25.140
但主体也是默认设置的。

55
00:02:25.140 --> 00:02:28.360
您也可以选择继承。

56
00:02:28.360 --> 00:02:29.320
对于字体粗细，

57
00:02:29.320 --> 00:02:31.070
我们将其设置为粗体，

58
00:02:31.070 --> 00:02:33.090
然后我们将创建第二个文本。

59
00:02:33.090 --> 00:02:36.910 line:15% 
因此，您可以选择此选项，然后选择Command D

60
00:02:36.910 --> 00:02:40.450
复制它将自动复制第一层

61
00:02:40.450 --> 00:02:42.010
进入第二个。

62
00:02:42.010 --> 00:02:43.050
不只是这天

63
00:02:43.050 --> 00:02:45.890
但是它将创建一个名为V堆栈的容器，

64
00:02:45.890 --> 00:02:47.440
这是一个垂直堆栈，

65
00:02:47.440 --> 00:02:50.820
可以对齐并堆叠其内部元素

66
00:02:50.820 --> 00:02:53.420
使用一致的间距。

67
00:02:53.420 --> 00:02:54.760
就像设计工具一样

68
00:02:54.760 --> 00:02:58.170
您可以从视觉上选择一种元素，

69
00:02:58.170 --> 00:03:00.400
或者如果元素重叠，

70
00:03:00.400 --> 00:03:02.830
您可以直接转到代码，

71
00:03:02.830 --> 00:03:05.350
然后选择V堆栈。

72
00:03:05.350 --> 00:03:07.520
现在我要双击第二个文本

73
00:03:07.520 --> 00:03:10.630
并将其更改为20部分。

74
00:03:10.630 --> 00:03:14.520
在这里，请注意，默认情况下元素居中。

75
00:03:14.520 --> 00:03:16.021
所以，如果您想改变它，

76
00:03:16.021 --> 00:03:18.380
我们要选择一个容器，它是一个V堆栈，

77
00:03:18.380 --> 00:03:21.970
然后我们可以向左对齐。

78
00:03:21.970 --> 00:03:23.290
在填充方面，

79
00:03:23.290 --> 00:03:25.290
我们可以选择元素。

80
00:03:25.290 --> 00:03:28.270
我们要去填充区域，

81
00:03:28.270 --> 00:03:32.840
您可以在此处看到默认情况下我们有一些值。

82
00:03:32.840 --> 00:03:35.603
您可以单击此将其删除。

83
00:03:36.460 --> 00:03:39.390
因此，现在不再有任何填充。

84
00:03:39.390 --> 00:03:42.423
我们将对第二个文本执行相同的操作并将其删除。

85
00:03:43.520 --> 00:03:46.523
让我们将字体更改为脚注，

86
00:03:47.530 --> 00:03:49.400
然后我们将删除粗体，

87
00:03:49.400 --> 00:03:52.600
并点击此处的蓝色按钮。

88
00:03:52.600 --> 00:03:55.520
您可以在此处看到这两个元素之间

89
00:03:55.520 --> 00:03:56.930
我们希望进行一些填充，

90
00:03:56.930 --> 00:04:00.670
但我们不一定要进行手动填充，

91
00:04:00.670 --> 00:04:03.380
这不是最理想的方式。

92
00:04:03.380 --> 00:04:06.410
相反，我们应该去集装箱，

93
00:04:06.410 --> 00:04:07.890
就是V堆栈，

94
00:04:07.890 --> 00:04:10.810
并设置间距。

95
00:04:10.810 --> 00:04:13.590
所以我们要去间距值

96
00:04:13.590 --> 00:04:16.450 line:15% 
并将其设置为4，然后按输入。

97
00:04:16.450 --> 00:04:19.840
与围绕元素的填充不同，

98
00:04:19.840 --> 00:04:24.410
间距是堆栈中元素之间的间隙。

99
00:04:24.410 --> 00:04:26.400
好吧，让我们谈谈颜色。

100
00:04:26.400 --> 00:04:27.900
就像动态类型一样

101
00:04:27.900 --> 00:04:30.700
您应该避免使用自定义颜色，

102
00:04:30.700 --> 00:04:33.520
除非您有自定义背景

103
00:04:33.520 --> 00:04:38.260
在明暗模式之间将以相同的方式存在。

104
00:04:38.260 --> 00:04:41.490
由于我尚未为标题设置颜色，

105
00:04:41.490 --> 00:04:43.830
它将自己设置为主色，

106
00:04:43.830 --> 00:04:46.890
在明亮模式下将变为黑色，

107
00:04:46.890 --> 00:04:49.430
然后在黑暗模式下为白色。

108
00:04:49.430 --> 00:04:52.390
现在，您可以访问一堆预设颜色。

109
00:04:52.390 --> 00:04:56.320
例如，我将在字幕上进行选择。

110
00:04:56.320 --> 00:04:58.380
我可以单击颜色。

111
00:04:58.380 --> 00:05:01.340
在这里您将找到一堆预设颜色

112
00:05:01.340 --> 00:05:02.920
自动适应。

113
00:05:02.920 --> 00:05:04.110
例如，

114
00:05:04.110 --> 00:05:07.760
红色在明暗模式之间是不同的。

115
00:05:07.760 --> 00:05:11.010
而且您还有我们之前设定的

116
00:05:11.010 --> 00:05:12.560
自定义资产目录颜色 .

117
00:05:12.560 --> 00:05:14.600
如果您想要自定义颜色，

118
00:05:14.600 --> 00:05:17.600
确保已在您的资产目录中设置了它。

119
00:05:17.600 --> 00:05:20.800
如果您要使用Apple预设的颜色之一，

120
00:05:20.800 --> 00:05:23.530
您可以转到iOS准则，

121
00:05:23.530 --> 00:05:25.170
然后向下滚动一点

122
00:05:25.170 --> 00:05:27.130
你会发现不同的颜色

123
00:05:27.130 --> 00:05:28.520
用于明暗模式。

124
00:05:28.520 --> 00:05:29.710
回到我们的应用

125
00:05:29.710 --> 00:05:31.650
我们要选择容器，

126
00:05:31.650 --> 00:05:34.740
然后我们添加背景色。

127
00:05:34.740 --> 00:05:36.280
但是在这里你可以看到

128
00:05:36.280 --> 00:05:39.120
检查器中没有背景色。

129
00:05:39.120 --> 00:05:41.500
实际上，有数百个失踪。

130
00:05:41.500 --> 00:05:44.520
这些属性中的每一个都称为修饰符，

131
00:05:44.520 --> 00:05:46.510
您可以通过转到底部的该字段

132
00:05:46.510 --> 00:05:48.650
添加自定义

133
00:05:48.650 --> 00:05:51.030
不幸的是，在此版本的Beta中，

134
00:05:51.030 --> 00:05:53.710
从这里是不可用，

135
00:05:53.710 --> 00:05:56.320
但您绝对可以转到加号。

136
00:05:56.320 --> 00:05:59.190
这就是我们所说的"插入"菜单。

137
00:05:59.190 --> 00:06:02.870
因此，您具有按钮的控件，

138
00:06:02.870 --> 00:06:05.350
日期选择器，表格等。

139
00:06:05.350 --> 00:06:06.830
然后有修饰符，

140
00:06:06.830 --> 00:06:09.010
样式的属性。

141
00:06:09.010 --> 00:06:12.090
因此，我们将搜索背景。

142
00:06:12.090 --> 00:06:14.720
在这里，我们找到背景，

143
00:06:14.720 --> 00:06:18.620
我们将直接拖放到检查器

144
00:06:18.620 --> 00:06:20.010
像这样。

145
00:06:20.010 --> 00:06:22.330
确保您正在申请正确的元素。

146
00:06:22.330 --> 00:06:25.720
在这种情况下，我选择了垂直堆栈。

147
00:06:25.720 --> 00:06:28.060
并注意，一旦我这样做，

148
00:06:28.060 --> 00:06:32.270
我有一个新属性，可以更改颜色。

149
00:06:32.270 --> 00:06:35.730
由于某种原因，我们添加了背景色之后，

150
00:06:35.730 --> 00:06:37.650
修改器现在正在工作。

151
00:06:37.650 --> 00:06:39.450 line:15% 
所以我们要寻找角落

152
00:06:40.460 --> 00:06:42.460
并选择拐角半径。

153
00:06:42.460 --> 00:06:44.303 line:15% 
让我们将数字更改为20。

154
00:06:45.340 --> 00:06:47.720
让我们添加一些填充。

155
00:06:47.720 --> 00:06:51.180
所以我要去填充并单击

156
00:06:51.180 --> 00:06:52.970
右边的圆圈

157
00:06:52.970 --> 00:06:57.950
并且这将在所有面上默认使用16点。

158
00:06:57.950 --> 00:06:59.650
让我们添加另一个修饰符。

159
00:06:59.650 --> 00:07:01.713 line:15% 
这次将被称为阴影。

160
00:07:02.790 --> 00:07:07.330
很好。现在，我们想在文本顶部添加一个图像。

161
00:07:07.330 --> 00:07:10.150
因此，我们将再次转到插入。

162
00:07:10.150 --> 00:07:12.590
我们将要转到图像。

163
00:07:12.590 --> 00:07:15.120
这来自我的资产目录

164
00:07:15.120 --> 00:07:16.840
我要选择第一个。

165
00:07:16.840 --> 00:07:18.510
因此，图一。

166
00:07:18.510 --> 00:07:21.400
直接拖放到预览，

167
00:07:21.400 --> 00:07:24.940
在这里，我可以针对我想要的任何部分。

168
00:07:24.940 --> 00:07:29.940
位于文本的顶部，底部或甚至左侧。

169
00:07:30.580 --> 00:07:34.763
在这种情况下，我将在标题的顶部进行操作，

170
00:07:35.730 --> 00:07:37.730
它看起来会像这样。

171
00:07:37.730 --> 00:07:39.330
如果您看一下代码的结构，

172
00:07:39.330 --> 00:07:40.520
我们有V堆栈，

173
00:07:40.520 --> 00:07:43.710
然后我们在V堆栈中包含三个元素。

174
00:07:43.710 --> 00:07:46.930
现在您可以看到图像太大了。

175
00:07:46.930 --> 00:07:48.700
那是因为SwiftUI

176
00:07:48.700 --> 00:07:52.080
始终采用图像的原始尺寸。

177
00:07:52.080 --> 00:07:56.870
因此，解决该问题需要添加一个修饰符。

178
00:07:56.870 --> 00:07:59.000
选择图片后，

179
00:07:59.000 --> 00:08:04.000 line:15% 
我要输入相当大的然后选择。

180
00:08:04.710 --> 00:08:07.670
这将确保调整图像大小

181
00:08:07.670 --> 00:08:10.680
并使用所有可用空间。

182
00:08:10.680 --> 00:08:14.290
在这种情况下，图像的比例不合适。

183
00:08:14.290 --> 00:08:15.650
所以还有另一个修饰符。

184
00:08:15.650 --> 00:08:20.650 line:15% 
我们要输入比例并选择宽高比。

185
00:08:21.120 --> 00:08:25.230
现在，它尝试使用填充来适应边界。

186
00:08:25.230 --> 00:08:27.743
您可以改为适合自己，

187
00:08:28.660 --> 00:08:29.760
像这样。

188
00:08:29.760 --> 00:08:31.950
所以这个技术很棒

189
00:08:31.950 --> 00:08:35.610
因为这意味着图像将始终调整大小，

190
00:08:35.610 --> 00:08:39.570
是根据卡片的最大宽度或高度。

191
00:08:39.570 --> 00:08:42.420
因此，如果我要单击V堆栈，

192
00:08:42.420 --> 00:08:46.010 line:15% 
并将高度设置为200，

193
00:08:46.010 --> 00:08:48.660
您将看到内部元素

194
00:08:48.660 --> 00:08:51.270
会尝试调整大小。

195
00:08:51.270 --> 00:08:52.920
这真的很好，

196
00:08:52.920 --> 00:08:57.220
会使你的布局适应设备。

197
00:08:57.220 --> 00:08:58.580
今天总结是，

198
00:08:58.580 --> 00:09:01.030
您要创建此组件

199
00:09:01.030 --> 00:09:04.140
去适应任意数量的列和行。

200
00:09:04.140 --> 00:09:07.960
这就是为什么我们实际上不想设置固定框架的原因。

201
00:09:07.960 --> 00:09:10.830
所以我们要去掉那200个高度。

202
00:09:10.830 --> 00:09:13.710
Xcode 12中的另一个新功能

203
00:09:13.710 --> 00:09:16.460
是您可以复制预览。

204
00:09:16.460 --> 00:09:18.070
对于每个预览，

205
00:09:18.070 --> 00:09:20.420
您可以在选项中选择

206
00:09:20.420 --> 00:09:25.290
更改设备，布局，配色方案，

207
00:09:25.290 --> 00:09:28.050
以及辅助功能选项，

208
00:09:28.050 --> 00:09:30.600
例如， 额外的超大文本。

209
00:09:30.600 --> 00:09:33.253
在这种情况下，我们将选择暗模式。

210
00:09:35.420 --> 00:09:40.420
现在您可以缩小，并且可以在此处看到我的文字

211
00:09:42.180 --> 00:09:45.350
正在根据明暗模式更改颜色。

212
00:09:45.350 --> 00:09:48.180
因为我没有设置颜色，

213
00:09:48.180 --> 00:09:50.680
默认情况下设置为黑色，

214
00:09:50.680 --> 00:09:53.000
对于暗模式，将其设置为白色。

215
00:09:53.000 --> 00:09:54.310
正如我之前提到的

216
00:09:54.310 --> 00:09:56.440
您实际上并不想设置自定义颜色，

217
00:09:56.440 --> 00:09:58.810
除非您有自定义背景，

218
00:09:58.810 --> 00:10:02.680
总的来说，对于明暗模式来说都是蓝色，

219
00:10:02.680 --> 00:10:03.750
在这种情况下，

220
00:10:03.750 --> 00:10:06.950
您可以随时将其设为白色。

221
00:10:06.950 --> 00:10:11.363
我要选择第一个文本并将其设置为白色。

222
00:10:13.400 --> 00:10:16.533
让我们对第二个文本也是如此。

223
00:10:17.910 --> 00:10:20.910
因此，现在两张卡都是一致的。

224
00:10:20.910 --> 00:10:22.600
我想指出的另一件事是

225
00:10:22.600 --> 00:10:25.010
检查员在这里可用，

226
00:10:25.010 --> 00:10:28.560
但也可以直接在预览中使用。

227
00:10:28.560 --> 00:10:31.550 line:15% 
因此，您可以使用Command单击元素

228
00:10:31.550 --> 00:10:35.650
显示SwiftUI检查器，

229
00:10:35.650 --> 00:10:39.710
这些选项将与这些完全相同。

230
00:10:39.710 --> 00:10:42.500
有一个快捷方式，而且无需单击两次。

231
00:10:42.500 --> 00:10:46.570 line:15% 
您可以执行"控制"选项并选择。

232
00:10:46.570 --> 00:10:49.600
它会直接交给检查员。

233
00:10:49.600 --> 00:10:51.290
预览也一样。

234
00:10:51.290 --> 00:10:54.940
因此，如果我选择预览本身，

235
00:10:54.940 --> 00:10:56.900
它会告诉我这里的选项

236
00:10:56.900 --> 00:10:59.830
而不是这里。

237
00:10:59.830 --> 00:11:02.200
现在，让我更改预览。

238
00:11:02.200 --> 00:11:06.340
我去布局并更改为固定。

239
00:11:06.340 --> 00:11:07.830
这是我要设置的位置，

240
00:11:07.830 --> 00:11:12.830 line:15% 
假设是宽度200乘高度200。

241
00:11:12.960 --> 00:11:16.130
现在，我可以看到它的外观，

242
00:11:16.130 --> 00:11:19.130
如果我的布局或设备是这种尺寸。

243
00:11:19.130 --> 00:11:22.090
我也注意到这里有些差距，

244
00:11:22.090 --> 00:11:25.220
也许我想将我的卡设置为全屏显示

245
00:11:25.220 --> 00:11:26.810
垂直也是如此。

246
00:11:26.810 --> 00:11:29.720
为此，我需要设置一个垫片。

247
00:11:29.720 --> 00:11:32.100
间隔符不是修饰符。

248
00:11:32.100 --> 00:11:34.770
这是推动容器的元素

249
00:11:34.770 --> 00:11:36.820
占用全部空间。

250
00:11:36.820 --> 00:11:39.410
因此，让我单击加号。

251
00:11:39.410 --> 00:11:43.313 line:15% 
我将转到控件并搜索spacer。

252
00:11:44.610 --> 00:11:47.260
在这里，我要拖放。

253
00:11:47.260 --> 00:11:49.510
再一次，任何我想要的地方。

254
00:11:49.510 --> 00:11:53.620
在这种情况下，就是我们图片的顶部。

255
00:11:53.620 --> 00:11:54.940
当我这样做时

256
00:11:54.940 --> 00:11:58.640
您可以看到它推动了整个购物车

257
00:11:58.640 --> 00:12:03.640
占用我在这里放置的可用空间。

258
00:12:03.760 --> 00:12:05.760
现在，您在这里看到了一些缝隙，

259
00:12:05.760 --> 00:12:07.460
那是安全的地方

260
00:12:07.460 --> 00:12:09.660
这与您的购物车无关。

261
00:12:09.660 --> 00:12:11.280
这取决于设备，

262
00:12:11.280 --> 00:12:13.010
我们稍后可以解决。

263
00:12:13.010 --> 00:12:14.500
所以要照顾这个差距，

264
00:12:14.500 --> 00:12:16.570
我们可以做的是同一件事。

265
00:12:16.570 --> 00:12:20.270 line:15% 
我们将单击加号，搜索间隔符，

266
00:12:20.270 --> 00:12:25.270
像这样将其拖放到图像的左侧。

267
00:12:25.700 --> 00:12:28.660
现在，因为我们在推动，

268
00:12:28.660 --> 00:12:30.250
图像不再居中

269
00:12:30.250 --> 00:12:33.180
我们在右侧也需要另一个垫片。

270
00:12:33.180 --> 00:12:34.950
还有插入的快捷方式，

271
00:12:34.950 --> 00:12:37.790 line:15% 
这是Shift Command和L

272
00:12:37.790 --> 00:12:39.680 line:15% 
再一次，寻找间隔，

273
00:12:39.680 --> 00:12:42.450
拖放到图像的右侧。

274
00:12:42.450 --> 00:12:43.380
查看图像，

275
00:12:43.380 --> 00:12:47.730
您可以看到它现在位于水平堆栈中，

276
00:12:47.730 --> 00:12:51.400
它在左右两侧都有一个空间。

277
00:12:51.400 --> 00:12:53.720
它在推手推车

278
00:12:53.720 --> 00:12:55.630
占据屏幕的整个宽度。

279
00:12:55.630 --> 00:12:57.810
现在我刚创建了一个购物车

280
00:12:57.810 --> 00:13:00.710
完全适合所有屏幕尺寸，

281
00:13:00.710 --> 00:13:02.710
我甚至可以重复一遍

282
00:13:02.710 --> 00:13:06.430
假设是在网格布局或列表布局中

283
00:13:06.430 --> 00:13:07.400
在我们完成之前，

284
00:13:07.400 --> 00:13:11.170
我只想说，

285
00:13:11.170 --> 00:13:12.800
即使这很棒 使用检查员，

286
00:13:12.800 --> 00:13:16.060
并通过预览进行拖放操作，

287
00:13:16.060 --> 00:13:19.080
但请记住，您会错过一些选择

288
00:13:19.080 --> 00:13:23.360
而且您将无法像在代码中那样拥有更多的控制权。

289
00:13:23.360 --> 00:13:25.900
而且，您不应该将这些值设置为蓝色。

290
00:13:25.900 --> 00:13:27.800
因此，我们将双击它们。

291
00:13:30.350 --> 00:13:33.860
现在，背景变为空白。

292
00:13:33.860 --> 00:13:35.990
在括号内，

293
00:13:35.990 --> 00:13:39.833 line:15% 
我们将输入颜色点 蓝色。

294
00:13:40.690 --> 00:13:45.130
让我们对这里的两个数字执行相同的操作。

295
00:13:45.130 --> 00:13:49.060
好的！今天我想向您展示用于SwiftUI的可视化编辑工具的

296
00:13:49.060 --> 00:13:51.860
所有新选项。

297
00:13:51.860 --> 00:13:54.140
这对初学者 对于设计师，对于原型制作

298
00:13:54.140 --> 00:13:56.500
来说特别好。

299
00:13:56.500 --> 00:13:59.730
因此，如果您有从未接触过SwiftUI的同事

300
00:13:59.730 --> 00:14:04.130
这是对Xcode和SwiftUI的出色介绍。

301
00:14:04.130 --> 00:14:05.040
在下一个章节中

302
00:14:05.040 --> 00:14:07.620
我们将学习SF符号

303
00:14:07.620 --> 00:14:09.690
以及如何使用列表样式。

304
00:14:09.690 --> 00:14:11.490
我将在下一章节再与您相见

