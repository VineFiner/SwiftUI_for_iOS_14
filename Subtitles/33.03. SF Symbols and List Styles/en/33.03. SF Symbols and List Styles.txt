- [Meng] Hey there, welcome to our third session of the SwiftUI course. Today we're gonna to learn how to use SF symbols to create these lists layouts that you can see everywhere in iOS. In the content of each session, I'm trying to link to resources that are being discussed, such as the SF Symbols app, which you should download for SF Symbols 2. And also, there are a bunch of Dub Dub DC videos that you can find the developer app by Apple. And here, you can search for SF symbols for example, and there, you have SF symbol two, as a video. Again, these resources will be linked from the text content. Now focusing on the new SF symbols now we have access to multicolor symbols, but also I'm going to show you how to use them in SwiftUI, and how to create a list styles. So back in Xcode, we're going to create a new file, and we're going to do Command N. This is going to create a new SwiftUI view. So we're gonna select this one next. We're gonna name that CourseRow. You can use the naming convention row for any repeatable element in the list. First things first, we're gonna resume the preview, and then we're going to replace text by image, parentheses, system name. So at this point, we're just gonna go fully code, because it's easier to debug, it's easier to control, and as you get used to it, it's just faster. Now while you do that, make sure that you're always using the auto-completion, because names and values can be rather long, but also programming is not forgiving, in terms of caps, lowercase and symbols. So back to our code, here it is expecting a name. And in this case, we can use the SF symbol name. If you go to SF symbols, we're going to go to Multicolor. And let's select this one called paperplane. There's a shortcut to copy the code. So in Edit, it's Copy Name, and the shortcut is Shift Command and C. So Shift Command C. Back to Xcode, we're going to paste that inside double quotes, like this. Now you're gonna to see the icon. It's barely visible because it's very small by default. But if you zoom in, you can see it more clearly. You can also make it bigger, so it has three sizes. And we can use a modifier. So, right after image, we're going to type dot imageScale. And then you can have medium and if you press dot you're gonna find all the options available to us in this context. So, you can also have large. So if you want to use the multicolor option, we have to add a modifier before the imageScale, so, dot renderingMode, then, dot original. So with this technique, you have access to all 2400 icons without importing any asset related to it. And on top of that, it works for the Mac as well, and you can change the font size to perfectly match the text and even match the font weight, which is equivalent to the stroke width of the icon. Now, I do want to point out that if you're using the font properties, you're not going to be able to use the multicolor, so the renderingMode and the imageScale will not be very useful, because the font size changes the size of the icon. But first of all, let me add a text next to the icon. So let me insert, it's going To take care of the stack for me. And I'm going to insert a text. Selecting the text, drag and drop to the right of the icon. So I can change the font size individually for the text and image, but I can also put the modifier in the container and it's going to apply to both at the same time. Let me do that. So right after HStack, I'm going to type dot font, Enter, and then set it to title. So what you're noticing here, is that the font is being applied to both of these elements. But also, the renderingMode no longer works. And if I change the font size to large title, both the icon and the text will resize. Now if you want to change the font weight, as well as the stroke width of the icon, we'll have to replace large title by system. And here we have a bunch of options, such as size, weight and design. So we're going to select this one. And now we can set a custom font size such as, let's say 34, which is the size of the large title. And the font weight can be, let's say bold. And for the font, if you type dot, you're going to find that you have the choice between default which is SF Pro, mono spaces, SF mono, SF routed for rounded and series is New York. Let's use rounded. Now you're gonna see that the text is more rounded, but the icon is not changed by the font. It's only changed by the weight, as well as the size. So if I set it to, let's say light, you're gonna see that the icon is lighter. And likewise for the text. Now, remember about the imageScale, I can use medium now or small depending on the ratio that I want versus the text. Okay, so this layout here is fairly common for, let's say a menu. But what if I want a second line of text. So let's just add a new text, and drag that right underneath the first text. So it's going to create a VStack containing both text. So now I'm just going to change back my dot system to dot subheadline. Now make sure that there's only one set of parentheses. And instead of applying both the icon and the text, I'm just going to cut it so Command X, and just put it on the first title. Then I'm going to paste the same modifier on the second title. For the second title, I'm gonna set it to dot footnote. Let's change the text. So the first one SwiftUI, the second one, we're going to change it to, let's say Description. I'm going to add a bold to the first text, so dot bold parentheses. Next, I'll make sure that within my VStack, I'm going to align the text to the left. So, in the inspector, click on alignment to the left. Speaking of inspector versus code, we're going to select the second text. And here in color, you're gonna see that I don't have access to some of the system color. And one of them is called secondary, which is really useful because it adapts across devices. Let's go to after dot font, we're going to type dot foregroundColor, and instead of blue, we're going to set dot secondary. This color should not be confused with the ones in the assets catalog. And this is really useful because it adapts to dark mode. All right, so let me select the VStack. Let's set a spacing of four. And then for the HStack, I'm going to set the alignment to top. Great. Now I'm going to make my frame of my icon bigger. So, selecting image, I'm going to go to frame and set it to 48 by 48. Then I'm going to add a modifier called background, then add another one called clip shape, which allows me to mask around any shape that I want. In this case, by default, it's set to a circle. Since both my background and my image is blue, I should probably add another one called foregroundColor to change the color of the icon, I'm going to set it to white. This is not applying because the renderingMode is set to original, I might want to use template instead. This allows me to color the icon as I wish. And so in this case, it's set to white. Okay, so we can add a spacer to the right in order to push everything to take the full width. Let's go to right after VStack and type Spacer parentheses. Awesome. Now that I have my row, I can create a new screen. So let's do that. Command N, select SwiftUI View. Name it CoursesView. Let's resume this. And then I can replace my text with CourseRow parentheses. And now, you can see that I'm referencing the UI element that I just created earlier. And to create my list layout, I can just Command click on CourseRow to get to a contextual menu, and I can select embed in list. Boom! Now I have my list UI, and I can repeat as many times as I want, such as 20, and it's going to be scrollable. If you want to be able to interact with the preview, you need to click on play. And this is where you can scroll the content like this. Now talking about list styles, we're gonna go to list and add a modifier called dot List Style. And here you don't really know what list styles are available to you, not even the inspector is helpful. So one thing you can do, which is super useful, is to Option Click on any modifier to get to the documentation. And you can click on ListStyle. This will open the built-in documentation, and then you can scroll, and here you have a bunch of types that you can use. For example, we can use InsetGroupedListStyle, and then paste that right here, at parentheses. So just like that, I'm able to have a beautiful new UI based on my custom design, which is the CourseRow, and the icon that can be changed to any of the 2400s. That's really powerful. So I hope you enjoyed this session. In the next one, we're gonna to explore how to create a sidebar and how to implement the new label. So I'll see you in the next session.