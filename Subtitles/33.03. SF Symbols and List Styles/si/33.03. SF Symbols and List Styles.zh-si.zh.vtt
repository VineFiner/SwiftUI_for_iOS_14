WEBVTT

1
00:00:05.855 --> 00:00:10.772
SwiftUI 2 - SF 符号和列表格式
使用SF Symbols 2和iOS14中的新列表格式

2
00:00:12.670 --> 00:00:13.503
[Meng] 嗨，大家好

3
00:00:13.503 --> 00:00:16.410
欢迎来到我们的第三节 SwiftUI 课程

4
00:00:16.410 --> 00:00:19.070
今天我们要学习如何使用SF符号

5
00:00:19.070 --> 00:00:20.950
创建这些列表布局

6
00:00:20.950 --> 00:00:23.720
你可以在iOS的各处看到它

7
00:00:23.720 --> 00:00:25.310
在每节内容中

8
00:00:25.310 --> 00:00:28.860
我要链接到正在被讨论的资源

9
00:00:28.860 --> 00:00:31.640
例如SF Symbols应用程序

10
00:00:31.640 --> 00:00:34.580
你应该为此下载SF Symbols 2

11
00:00:34.580 --> 00:00:35.413
并且

12
00:00:35.413 --> 00:00:37.490
有很多Dub Dub DC视频

13
00:00:37.490 --> 00:00:41.110
你可以找到Apple的开发人员应用程序

14
00:00:41.110 --> 00:00:45.300
例如，你可以在这里搜索SF符号

15
00:00:45.300 --> 00:00:48.630
在此处，可以找到SF Symbols 2 视频

16
00:00:48.630 --> 00:00:53.130
同样，这些资源将与文本内容链接在一起

17
00:00:53.130 --> 00:00:55.530
就新的SF符号而言

18
00:00:55.530 --> 00:00:58.900
现在我们可以使用多色符号

19
00:00:58.900 --> 00:01:02.810
我还将向你展示如何在SwiftUI中使用它们

20
00:01:02.810 --> 00:01:04.950
以及如何创建列表样式

21
00:01:04.950 --> 00:01:06.310
回到Xcode

22
00:01:06.310 --> 00:01:08.130
我们将创建一个新文件

23
00:01:08.130 --> 00:01:10.750
我们使用 Command + N

24
00:01:10.750 --> 00:01:13.770
这将创建一个新的SwiftUI视图

25
00:01:13.770 --> 00:01:15.707
我们要选择这一个

26
00:01:15.707 --> 00:01:17.200
接下来

27
00:01:17.200 --> 00:01:20.686
我们将其命名为CourseRow

28
00:01:22.210 --> 00:01:25.280
你可以使用命名约定行

29
00:01:25.280 --> 00:01:28.880
用于列表中的任何可重复元素

30
00:01:28.880 --> 00:01:32.220
首先，我们要恢复预览

31
00:01:32.220 --> 00:01:34.200
然后我们要替换文本

32
00:01:34.200 --> 00:01:39.200
依次点击图像、括号、系统名称

33
00:01:39.900 --> 00:01:42.550
这时，我们将要使用完整的代码

34
00:01:42.550 --> 00:01:44.730
因为它更容易调试

35
00:01:44.730 --> 00:01:46.610
更容易控制

36
00:01:46.610 --> 00:01:49.770
在你习惯之后，就会做得更快

37
00:01:49.770 --> 00:01:50.860
在你这样做时

38
00:01:50.860 --> 00:01:54.090
要始终使用自动填充功能

39
00:01:54.090 --> 00:01:57.190
因为这些名称和值可能会很长

40
00:01:57.190 --> 00:02:00.030
但是编程不是宽容的

41
00:02:00.030 --> 00:02:03.560
就大写字母、小写字母和符号而言

42
00:02:03.560 --> 00:02:04.940
回到我们的代码

43
00:02:04.940 --> 00:02:08.090
在这里需要输入一个名字

44
00:02:08.090 --> 00:02:09.200
在这种情况下

45
00:02:09.200 --> 00:02:11.740
我们可以使用SF符号名称

46
00:02:11.740 --> 00:02:13.250
如果你使用SF符号

47
00:02:13.250 --> 00:02:15.620
我们要使用多色彩

48
00:02:15.620 --> 00:02:18.470
让我们选择这个，它叫做paperplane

49
00:02:18.470 --> 00:02:20.540
有一个复制代码的快捷方式

50
00:02:20.540 --> 00:02:23.680
在"编辑"中，它就是"复制名称"

51
00:02:23.680 --> 00:02:27.100
其快捷键是Shift + Command和C

52
00:02:27.100 --> 00:02:28.910
Shift + Command和C

53
00:02:28.910 --> 00:02:30.610
回到Xcode

54
00:02:30.610 --> 00:02:34.660
我们将其粘贴在双引号中

55
00:02:34.660 --> 00:02:35.750
像这样

56
00:02:35.750 --> 00:02:37.960
现在你将看到该图标

57
00:02:37.960 --> 00:02:40.940
它几乎不可见，因为在默认情况下它很小

58
00:02:40.940 --> 00:02:43.620
如果把它放大，则可以更清楚地看到它

59
00:02:43.620 --> 00:02:47.110
你也可以将其放大，它有三种尺寸

60
00:02:47.110 --> 00:02:48.980
我们可以使用修饰符

61
00:02:48.980 --> 00:02:50.750
就在图像之后

62
00:02:50.750 --> 00:02:55.180
我们将输入.imageScale

63
00:02:55.180 --> 00:02:57.350
然后使用Medium

64
00:02:57.350 --> 00:03:00.050
如果你按下dot，你将看到

65
00:03:00.050 --> 00:03:03.210
我们在此可以使用的所有选项

66
00:03:03.210 --> 00:03:06.030
你也可以使用"大号"

67
00:03:06.030 --> 00:03:09.040
如果你想使用多色选项

68
00:03:09.040 --> 00:03:12.180
我们必须在imageScale之前添加一个修饰符

69
00:03:12.180 --> 00:03:14.563
输入. renderingMode

70
00:03:15.830 --> 00:03:18.563
然后是.original

71
00:03:19.430 --> 00:03:20.600
采用此技术

72
00:03:20.600 --> 00:03:23.440
你可以访问所有2400个图标

73
00:03:23.440 --> 00:03:26.780
而无需导入与其相关的任何资源

74
00:03:26.780 --> 00:03:28.000
最重要的是

75
00:03:28.000 --> 00:03:29.510
它还适用于Mac

76
00:03:29.510 --> 00:03:31.820
你可以更改字体大小

77
00:03:31.820 --> 00:03:35.490
以便与文本匹配，甚至匹配字体粗细

78
00:03:35.490 --> 00:03:39.210
这等效于图标的笔触宽度

79
00:03:39.210 --> 00:03:40.550
我要指出的是

80
00:03:40.550 --> 00:03:43.360
如果你要使用字体属性

81
00:03:43.360 --> 00:03:46.310
你将无法使用多色

82
00:03:46.310 --> 00:03:48.990
所以renderingMode和imageScale

83
00:03:48.990 --> 00:03:50.310
不是非常有用

84
00:03:50.310 --> 00:03:54.370
因为字体大小会更改图标的大小

85
00:03:54.370 --> 00:03:57.740
首先，让我在图标旁边添加一个文本

86
00:03:57.740 --> 00:03:59.640
我要将其插入

87
00:03:59.640 --> 00:04:02.540
它会保证stack的位置

88
00:04:02.540 --> 00:04:05.280
我要插入文本

89
00:04:05.280 --> 00:04:06.660
选择文字

90
00:04:06.660 --> 00:04:10.130
拖放到图标的右侧

91
00:04:10.130 --> 00:04:12.780
我可以单独更改字体大小

92
00:04:12.780 --> 00:04:14.710
对于文字和图像

93
00:04:14.710 --> 00:04:18.750
我也可以将修饰符放入容器中

94
00:04:18.750 --> 00:04:21.320
使其同时应用于两者

95
00:04:21.320 --> 00:04:22.153
我要这样做

96
00:04:22.153 --> 00:04:24.290
在HStack之后

97
00:04:24.290 --> 00:04:28.540
我要输入.font，然后按Enter

98
00:04:28.540 --> 00:04:30.520
然后将其设置为标题

99
00:04:30.520 --> 00:04:32.220
你在这里会注意到

100
00:04:32.220 --> 00:04:36.450
该字体已被应用于这两个元素

101
00:04:36.450 --> 00:04:40.410
而且，renderingMode将不再起作用

102
00:04:40.410 --> 00:04:44.850
如果我将字体大小更改为大标题

103
00:04:44.850 --> 00:04:48.510
图标和文本的大小都将得到调整

104
00:04:48.510 --> 00:04:50.730
如果你要更改字体粗细

105
00:04:50.730 --> 00:04:53.580
以及图标的笔触宽度

106
00:04:53.580 --> 00:04:57.360
我们将使用system 来替换大标题

107
00:04:57.360 --> 00:04:59.520
在这里，我们有很多选择

108
00:04:59.520 --> 00:05:02.090
例如尺寸、粗细和设计

109
00:05:02.090 --> 00:05:04.080
我们将选择这个

110
00:05:04.080 --> 00:05:07.210
现在我们可以设置自定义字体大小

111
00:05:07.210 --> 00:05:10.610
假设34，即大标题的大小

112
00:05:10.610 --> 00:05:14.460
字体粗细可以是，比如粗体

113
00:05:14.460 --> 00:05:16.880
对于字体，如果你输入"点"

114
00:05:16.880 --> 00:05:18.844
你会发现，你可以选择的选项有

115
00:05:18.844 --> 00:05:21.020
默认设置

116
00:05:21.020 --> 00:05:23.460
mono空格，SF mono

117
00:05:23.460 --> 00:05:27.380
SF rounded选择圆滑，系列为 New York

118
00:05:27.380 --> 00:05:29.073
让我们使用rounded

119
00:05:30.610 --> 00:05:34.220
现在你将看到文字形状变得更圆滑

120
00:05:34.220 --> 00:05:37.130
但图标不会因字体而改变

121
00:05:37.130 --> 00:05:41.920
它仅随粗细和大小而变化

122
00:05:41.920 --> 00:05:44.453
如果我将其设置为"light"

123
00:05:45.300 --> 00:05:47.750
你会看到该图标更亮

124
00:05:47.750 --> 00:05:49.930
文字也是如此

125
00:05:49.930 --> 00:05:52.670
对于imageScale

126
00:05:52.670 --> 00:05:55.540
我现在可以使用中号或小号

127
00:05:55.540 --> 00:05:58.870
取决于我所设定的，与文字的比例

128
00:05:58.870 --> 00:06:01.680
好的，这个的布局很常见

129
00:06:01.680 --> 00:06:02.990
对于菜单来说

130
00:06:02.990 --> 00:06:05.350
但如果我要加第二行文本，该怎么办

131
00:06:05.350 --> 00:06:07.623
我们来添加一个新文本

132
00:06:09.490 --> 00:06:13.750
并将其拖到第一个文本下方

133
00:06:13.750 --> 00:06:17.090
它将创建一个包含两个文本的VStack

134
00:06:17.090 --> 00:06:22.040
现在我要将.system

135
00:06:22.040 --> 00:06:24.420
改成.subheadlines

136
00:06:24.420 --> 00:06:28.380
确保只有一组括号

137
00:06:28.380 --> 00:06:32.840
我不是同时应用图标和文本

138
00:06:32.840 --> 00:06:36.160
而是要剪掉它，即Command + X

139
00:06:36.160 --> 00:06:39.920
并把它放在第一个标题上

140
00:06:39.920 --> 00:06:43.130
然后我将粘贴相同的修饰符

141
00:06:43.130 --> 00:06:45.080
到第二个标题上

142
00:06:45.080 --> 00:06:46.120
对于第二个标题

143
00:06:46.120 --> 00:06:49.270
我将其设置为.footnote

144
00:06:49.270 --> 00:06:50.770
让我们更改文本

145
00:06:50.770 --> 00:06:53.350
所以，第一个SwiftUI

146
00:06:53.350 --> 00:06:55.890
第二个，我们将其更改为

147
00:06:55.890 --> 00:06:57.183
比方说Description

148
00:06:58.180 --> 00:07:01.400
我要在第一个文本中添加一个粗体

149
00:07:01.400 --> 00:07:03.710
即. Bold parentheses

150
00:07:03.710 --> 00:07:06.810
接下来，我将确保在我的VStack中

151
00:07:06.810 --> 00:07:09.650
我将文本向左对齐

152
00:07:09.650 --> 00:07:13.870
在检查器中，单击左侧对齐

153
00:07:13.870 --> 00:07:16.720
对于检查器与代码

154
00:07:16.720 --> 00:07:18.870
我们将选择第二个文本

155
00:07:18.870 --> 00:07:20.640
在这里的颜色中

156
00:07:20.640 --> 00:07:22.210
你会看到我没有访问权限

157
00:07:22.210 --> 00:07:23.940
对于系统中的某些颜色

158
00:07:23.940 --> 00:07:26.020
其中之一被称为secondary

159
00:07:26.020 --> 00:07:29.790
这真的很有用，因为它适用于不同设备

160
00:07:29.790 --> 00:07:32.490
让我们转到.font 之后

161
00:07:32.490 --> 00:07:35.960
我们将输入. foregroundColor

162
00:07:35.960 --> 00:07:39.870
我们不用蓝色，而是将其设置为.secondary

163
00:07:39.870 --> 00:07:41.870
此颜色不应被误认为是

164
00:07:41.870 --> 00:07:44.210
资源目录中的颜色

165
00:07:44.210 --> 00:07:48.230
这真的很有用，因为它适用于暗色模式

166
00:07:48.230 --> 00:07:50.523
好吧，我来选择VStack

167
00:07:51.420 --> 00:07:54.370
我们将间距设置为4

168
00:07:54.370 --> 00:07:56.787
对于 HStack

169
00:07:57.670 --> 00:08:01.370
我要将对齐方式设置为顶部对齐

170
00:08:01.370 --> 00:08:05.470
我要使图标框变大

171
00:08:05.470 --> 00:08:07.940
选择图片

172
00:08:07.940 --> 00:08:12.903
我要转到边框，并将其设置为48 x 48

173
00:08:14.350 --> 00:08:17.193
我要添加一个名为background的修饰符

174
00:08:18.200 --> 00:08:20.580
然后添加另一个，名为clip shape

175
00:08:20.580 --> 00:08:24.620
这使我可以遮盖任何形状

176
00:08:24.620 --> 00:08:27.900
在这种情况下，默认的设置为圆形

177
00:08:27.900 --> 00:08:30.680
由于我的背景和图像都是蓝色的

178
00:08:30.680 --> 00:08:33.530
我应该再添加一个foregroundColor

179
00:08:33.530 --> 00:08:36.720
更改图标的颜色

180
00:08:36.720 --> 00:08:38.663
我将其设置为白色

181
00:08:39.510 --> 00:08:40.500
它没有生效

182
00:08:40.500 --> 00:08:43.600
因为renderingMode被设置为original

183
00:08:43.600 --> 00:08:45.940
我需要改用模板

184
00:08:45.940 --> 00:08:49.620
这使我可以根据需要为图标着色

185
00:08:49.620 --> 00:08:51.600
在这种情况下，它被设置为白色

186
00:08:51.600 --> 00:08:53.810
好的，我们可以在右侧添加一个间隔

187
00:08:53.810 --> 00:08:57.000
以使所有空间都采用全宽度

188
00:08:57.000 --> 00:09:02.000
让我们转到右侧，在VStack之后键入Spacer及括号

189
00:09:02.420 --> 00:09:06.220
好，我已经有了一行，我可以创建一个新屏幕

190
00:09:06.220 --> 00:09:07.260
让我们来做吧

191
00:09:07.260 --> 00:09:10.800
Command + N，选择SwiftUI视图

192
00:09:10.800 --> 00:09:12.433
将其命名为CoursesView

193
00:09:14.930 --> 00:09:16.750
让我们重新使用它

194
00:09:16.750 --> 00:09:19.311
我可以将文本

195
00:09:19.311 --> 00:09:20.561
替换为CourseRow及括号

196
00:09:23.700 --> 00:09:26.260
现在，你可以看到我正在引用

197
00:09:26.260 --> 00:09:29.870
我刚才创建的UI元素

198
00:09:29.870 --> 00:09:31.630
并创建我的列表布局

199
00:09:31.630 --> 00:09:34.820
我可以按Command，同时单击CourseRow

200
00:09:34.820 --> 00:09:39.820
进入上下文菜单，然后选择"嵌入列表"

201
00:09:40.400 --> 00:09:43.180
太棒了，现在我有了列表用户界面

202
00:09:43.180 --> 00:09:45.600
我可以重复很多次

203
00:09:45.600 --> 00:09:47.850
例如20次

204
00:09:47.850 --> 00:09:49.920
并且它可以上下滚动

205
00:09:49.920 --> 00:09:52.720
如果你希望能够与预览互动

206
00:09:52.720 --> 00:09:54.373
你需要点击播放

207
00:09:55.250 --> 00:09:59.993
在这里，你可以像这样滚动内容

208
00:10:01.720 --> 00:10:03.980
现在谈谈列表样式

209
00:10:03.980 --> 00:10:07.400
我们将要转到列表，并添加一个修订符

210
00:10:07.400 --> 00:10:09.123
名为 .List Style

211
00:10:10.040 --> 00:10:11.310
此时，你还不知道

212
00:10:11.310 --> 00:10:14.120
哪些列表样式是可以使用的

213
00:10:14.120 --> 00:10:16.690
甚至连检查器也没有帮助

214
00:10:16.690 --> 00:10:18.040
你可以做的一件事

215
00:10:18.040 --> 00:10:19.980
它是超级有用的

216
00:10:19.980 --> 00:10:22.870
即在任意修饰符上使用Option Click

217
00:10:22.870 --> 00:10:24.550
以获取文档

218
00:10:24.550 --> 00:10:26.710
你可以单击ListStyle

219
00:10:26.710 --> 00:10:30.280
这将打开内置文档

220
00:10:30.280 --> 00:10:31.530
然后你可以滚动

221
00:10:31.530 --> 00:10:34.660
这里有很多可以使用的类型

222
00:10:34.660 --> 00:10:36.760
例如，我们可以使用

223
00:10:36.760 --> 00:10:39.300
InsetGroupedListStyle

224
00:10:39.300 --> 00:10:43.890
然后将其粘贴在此处的括号中

225
00:10:43.890 --> 00:10:45.240
就是这样

226
00:10:45.240 --> 00:10:47.730
我可以拥有一个漂亮的新用户界面

227
00:10:49.210 --> 00:10:52.700
根据我的自定义设计，即CourseRow

228
00:10:52.700 --> 00:10:57.210
可将图标更改为2400种图标中的一个

229
00:10:57.210 --> 00:10:58.800
那真的很有用

230
00:10:58.800 --> 00:11:00.420
我希望你喜欢这节课内容

231
00:11:00.420 --> 00:11:01.253
在下节课中

232
00:11:01.253 --> 00:11:04.000
我们将探讨如何创建侧边栏

233
00:11:04.000 --> 00:11:06.240
以及如何加上新标签

234
00:11:06.240 --> 00:11:08.073
我们下节课见

235
00:11:09.244 --> 00:11:10.077
designcode.io

