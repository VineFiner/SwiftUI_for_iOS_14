- [Meng] Hi and welcome to a fifth session of my Swift UI course. So everything we have done so far can be built for the Mac app as well. Now, please keep in mind that in order to test for the Mac app, you're going to need Big Slur. If you don't have it, you're going to need to stick to what you see on the iPad, as well as the iPhone. So for those who have it, we're going to switch to Mac OS target, and we're going to select my Mac. Now, as soon as you do that, you're going to see that there are some code that simply don't work for the Mac. To solve this we're going to add a condition. So right before list, we're going to do #ifos parenthesis iOS, then right after .navigation, we're going to set #else, and then after that #andif. In order to use this condition at the top level, we're going to need to add before var body, commercial A view builder. Now, if you do command B, it's going to try to build, and the error will disappear. And by the way, if you do this at this version of the beta, sometimes the code highlighting will stop working in some portions, that's normal. So if you look at the code, this will run on iOS and whatever is in between the else and the andif will run on the Mac. But in this case, we're going to have to repeat the code and we want to avoid doing that. And there's a trick that I learned, which is to use many components. And to do that we're going to declare right after the body curly braces, we're going to add var content of type some view, curly braces. And this is where we can put the entire code. So we're going to cut it, command X, and we're going to move it to the content inside the curly braces. As a result, we can reference this mini component called content by just typing content. So I'm going to do that for both places. This is for iOS, and this is for Mac OS. And then whatever code such as a modifier that should only work for iOS. I can just cut it by selecting it and command X and then paste it just for iOS. So this is great for breaking down a huge view and not having to create a new some view where you would have to pass data. And it's especially useful when you're targeting for specific platforms. So now, are you ready to run your first Mac OS app? Well, let's just click on resume. And there you go. So your list UI should look just like this. If you want to interact with your Mac app, you're going to have to click play, and then we have to click bring forward. So this will create two windows. The first one is the X code preview. So every time you make a change here, it's going to auto update the X code preview. The second one is the actual app. So if you hide X code, you can see that this is your app. It has your icon, it has the sidebar, which is the first view being loaded. And remember just like the iPad, we have the courses and it goes to the courses view. So developing for the Mac, iOS has some slight differences. So for example, each content space should always have a frame. Otherwise you can resize it and it's going to hide a bunch of things, or you're going to see a tiny window with a minimum content, and it's going to look buggy. So if you don't need to interact with your Mac app, it's just best to stop. And also we're going to set a minimum frame size for the content so that you can not go smaller than that. So here, right after content for the else, so this is for the Mac, we're going to set .frame parenthesis minWidth: to 800 minHeight: to 600. Let's run the app and bring it forward. Now, make sure that you don't hide the sidebar because it's going to be very hard to bring it back, which is why we should definitely set a minimum size for the sidebar. So let's go to sidebar.Swift. So let's use the same technique. And also we can not have a title learn on the sidebar, but it makes sense for iOS. What I'm going to do is right after the curly braces of body, I'm going to set var content: someview, curly braces, and I'm going to select everything for the list and the modifier list style and navigation title, command X to cut it and paste it in content. Next, I'm going to set my condition. So #ifos . we're going to put content #else, then #andif. For the content, I'm going to use the navigation title. So I'm going to cut this and put it right next to content. So this is only for iOS. And then for the Mac after else, I'm going to put content. Then I'm going to set a modifier for frame. So .frame parenthesis minWidth: 200. Then idealwdith: 250, then maxWidth:300. So ideal width, I believe is pretty new. And if you option click on the name, you're going to find the documentation. It's not super helpful here. It just says the ideal height and from my understanding is that if the user hasn't customized the window, then it's going to show 250. If you run this, you're going to see a minimum width of 200 and a maximum of 300. One thing to note is that you can still hide the sidebar. Right now, I haven't found a way to toggle it back. So one trick that I found to restore it is to simply do courseRow, right after courseView. So to add a third column. And then when you run it again, it's going to show the sidebar. I suspect that this is a beta issue and will be resolved later. So let me put it back without the third column, which is courseRow. And before we move on, I just want to point out that .frame for the content or for the sidebar should not be used outside of the Mac because on iOS, it doesn't make sense. You do have a fixed width for the sidebar and the content should accommodate the screen size. In the next session. I want to show you how to use the new toolbar modifier, and how to organize your files as your project get bigger. And you want to keep things clean and easy to navigate. So I'll see you in the next session.