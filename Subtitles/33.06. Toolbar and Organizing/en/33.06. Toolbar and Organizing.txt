- [Meng] Hey there, so we are on the sixth session of my SwiftUI course. And we're going to discuss the toolbar and how to organize our files. And this is where we can switch back to iOS for the iPhone 11 Pro, and resume, the toolbar is new this year. And it's going to allow you to put a bunch of buttons and content in key areas of the platform. So for example, on iOS, you can put it on the navigation bar, and at the bottom as well. This is like the navigation bar items, but for cross platform and not restricted to the navbar. So to use it, I'm going to add a modifier called .toolbar. Then you can use the first auto completion, press Enter and now you have a toolbar item. And this is where you can put your button or your texts or icons, you can already see in the top right, it says placeholder so we can just replace that with image parentheses system name, then we're gonna put person.crop.circle. So if you run this, you're gonna see that it's simply part of the navbar. And thanks to the toolbar, we can place it anywhere we want. So for example, after toolbar item, I'm gonna set parentheses and put placement column.bottomBar. And so when I do that, it moved my icon to the bottom. Depending on the platform and the context, we have a bunch of options. If you wanna know all of them, you can optionally click on bottom bar, open developer documentation. Click on toolbar item placement. And this is where you're gonna find a list of places to use depending on platform and context. So you can see here that we have navigation bar leading and trailing. So we can try that navigation bar leading, and this would be to the top left, then we can change to trailing. And this will go to the top right, and for the Mac, we cannot use exactly the same placement. So let's copy the modifier toolbar. So Command C, and put it two L's content. And after dot frame, paste it, you won't see it here. So we're gonna have to switch back to the Mac. And now you can see that we have an error that says that this is not available in Mac OS. So we can change this to automatic and this would be the same as just removing it if you want to. And now we're gonna click on resume. So once it's run, you can click on bring forward. And now you can see that this is your Xcode preview. And you won't really see the navbar and the toolbar and Xcode preview, but definitely for your Mac App, you're gonna see the title. And thanks to the toolbar item, it's slightly bigger and actually more beautiful in my opinion. So that's really neat. And now we can put any type of content here, we can put a text, we can place it to the left side, and we can even turn this into a button. And Xcode does a pretty good job at knowing which ones are available in which platform. So in this case, you're not gonna see the navigation bar trailing, but I can definitely use all of these other ones. And if you wanna make it as a button, we're going to have to Command click on image. Let's insert in a vstack first, and change that to button and then we can put some empty action. Here it says it's missing it, so we can click on fix. And for action, just put curly braces. Cool, so let's click on bring forward. And now you can see that this is now a button, it has a nice frame, and you can make it interactive later. Awesome, so now let's clean up our project and add some tweaks for the Mac. So let's go to content view. And so this is the UI that we created for course item, and so we shouldn't put it on content view. Let's create a new file, so Command N, double click on SwiftUI view, type course item, create, and this is where we're gonna move everything for the vstack and the modifiers. So Command X, we're gonna move that to course item instead of the text and save. We're gonna go back to content view, then we're going to reference the site bar parentheses. As for the preview, we don't need the two previews, we can just keep a single one and resume. At this point, we're gonna use the content view as the first view that's going to be loaded. And we're going to include the sidebar and later on the tab bar for iPhone, and then we gonna put some frame for the Mac. First of all, we're gonna need that condition. So pound if OS parenthesis iOS, after sidebar, pound, else, and then pound and if let's not forget the view builder before. And finally for the Mac, so we're gonna put sidebar parentheses, and we're going to add a frame modifier, and this is where I can recommend that you should put a minimum width for your entire Mac app. In this case, we can put it to let's say 1,000 and in minimum height to 600. So if you resume your preview, you're gonna see that because of the size that I have, it can now accommodate and show me the sidebar correctly. We should also go back to design code course app where we're going directly to the sidebar. And in this case, we should definitely go to the content view instead. So content view, speaking about organizing your files and learning SwiftUI in general, definitely go to the WWDC website and click on sample code. So one way that I learned how to organize my project is by looking at the source code of the Fruta app created by Apple where they're creating a multi platform app. After you download it and open the project, you're gonna find that they have the same organization for shared folder, iOS, Mac OS. Now where I took a lot of inspiration from is how they're organizing let's see the data model, the navigation and the components. Now for the navigation, you can see here that if it's iOS, it's detecting if it's an iPhone using horizontal size class, and it's showing the top bar. Otherwise, for the iPad, it's going to be the sidebar, or for the Mac, you can see that it also has a frame size. Since we don't have a tab bar yet, we don't need to detect if it's an iPhone or not. Back to our project, let's create a folder for content view. So let's select content view, right click on it, and new group form selection. This is where we're going to name that group navigation. Then we're going to move sidebar and put it inside navigation as well. We don't have data model yet, so we won't be making that folder yet. But otherwise, let's create a new folder called items. So let's right click on course item, new group from selection, we're gonna name this one items. So in most project, you're gonna see a folder called components. And usually people put all the reusable components there, and it tends to get a bit messy. So what I try to do is to be a bit more specific. And in this case, four items, I'm putting everything that can be repeated many times inside a grid layout, or a list layout. So in this case, we have the course item. And we also have the course row. And then for the screens. I'm just putting it here until it gets a little bit messy. And then you can create a folder called screens. But personally, I like my screens to be easy to reach from the root. Because you have the thing that when people first land on your project, that's the first thing that they're interested in. And they want to be able to easily navigate between the different screens and then explore to deeper levels. All right, so before going to the next session, I just wanna point out that when you make a screen, this is where you typically will have your navigation title. Also, oftentimes, you don't want to repeat the navigation view, otherwise it's going to bug. And that navigation view has already been included in the sidebar. So you don't wanna do that also in the screen itself. Anyways, a lot of this will come with practice, and we're gonna explore more and more into how we organize our files. For now what I wanna do is to turn this view into course row. So I'm going to create a new file Command N double click on SwiftUI view. Let's name it course list. And we're gonna move all the code inside courses view, curly braces. So including view builder body in content, Command X, we're gonna move that to replace by in course list and save. Now back to courses view, we're gonna put the var body type some view, curly braces. And this is where we're gonna start a new view with text parentheses and it's going to be empty. Typically a custom layout or a general layout is going to be view at the end. And if it's using a list it's going to be list at the end for the items that you're repeating a lot. It's course row or course item. I do realize that reorganizing your files and folders and refactoring some of the code can be scary to a lot of beginners. So feel free to download the source files and start from my template and that is valid for any section that you have trouble with. So back to courses view, we're ready to start a big series of videos on match geometry effect as well as lazy grid, we're also going to do a lot of animations, transitions. It's going to be a lot of fun. So I'll see you, in the next session.