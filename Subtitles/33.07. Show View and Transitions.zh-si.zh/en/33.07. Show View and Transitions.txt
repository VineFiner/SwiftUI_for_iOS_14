- [Meng] Hey there, welcome to my SwiftUI course session seven. Today we're gonna start a long series of videos around matched geometry. Along the way, we're gonna learn a bunch of new techniques such as asymmetric transition, selection state, lazyGrid, etcetera. First of all, let's start by switching to iOS. I'm gonna select iPhone 11 for preview, so click on resume. Instead of the text here, we're gonna put CourseItem parentheses. So this is the cart design that we have created earlier. And now we're gonna set a fixed frame, so dot frame with a width of 335 and a height of 250. Now what we want to do is when we tap on this cart is gonna show up full screen view. In order to do that, we're gonna have to place this CourseItem inside a VStack first and change from VStack to ZStack. This will allow us to have many carts on top of each other three dimensionally, instead of stacking vertically or horizontally. Now we're gonna set the new view CourseItem parentheses, then we're gonna make sure that this new view is not shown by default. So we're gonna have to set a state. State var show is equal to false. Then we're gonna add a condition for the second course item. Let's wrap it inside a VStack first, and change from VStack to if show. Whenever you update your variables, you're gonna have to resume the preview. And when you do that, then the full screen will be not shown by defaults. Let's add a tap gesture, so that when we tap on this cart, it's gonna show the full screen. Let's place that for the ZStack, so everything. So after ZStack dot TapGesture, and this is where we're gonna type show dot toggle parentheses. This will ensure that every time that we tap on the cart, it's gonna switch between true and false. Let's click on play. And now when we tap the cart, it switch to full mode. And again, back and forth. Of course, we're gonna need to transition, so we can set dot animation, and by default is gonna set to easeIn, which creates a simple fade in fade out animation. If you want to customize this transition, you're going to need to place a modifier on the first parent container inside the if show. So let's put dot transition. And here, if you type dot, you have a bunch of options, such as opacity, which is by default. But otherwise, you also have slide. And here, it's gonna slide from the left, and then move to the right. Now, what you're noticing here, is that when you do the transition out, then suddenly the cart goes behind the first cart, and that's not what we want. Normally, you would solve this using a zIndex, such as dot zIndex. Insert a value of one. But during this beta, it seems to be a little bit buggy, especially when you click multiple times. And don't worry, we're gonna explore zIndex more later. But a quick solution that I found. So I'm gonna remove the zIndex, so now its smooth. Is to put the if show inside a VStack. So let's put the Vstack, curly braces, and I'm gonna cut everything for the if statement and paste it inside the VStack. If you do this, then your new view is gonna always be on top. And now we can explore the other transitions such as scale. And this is what it looks like. Then a very useful one is to use move using one of the edges. A common transition is from trailing, which means from the right, and so, it's a screen that goes from the right and then that hides back. If you want your full screen to not be restricted by the safe area, then you can add a modifier dot edgeIgnoringSafeArea dot all. So now you're going to see a beautiful full screen mode that slide from the right. And we can change from which direction it comes from. Bottom is also very common, like this, almost like a modal but without the stacking carts as well as the gesture. At the same time, unlike the modal, these trends additions are very customizable. I can also put it from leading, which is from the left. And then in terms of animation, we can change to easeIn out. So that means that it's gonna be slow at the beginning of the animation and at the end. And a lot more options such as duration, delay, repeat, which I explore quite a lot in my previous course. For now, let's focus on spring, which is really neat, because it's going to bounce a little bit. It gives us that effect that you see a lot on iOS. But I do want to point out that while this is a good way to set up the animation, you can also do it during the action. So here I'm gonna type withAnimation curly braces, and I'm gonna bring show dot toggle inside it. Let's disable dot animation modifier and just focus on withAnimation. Now I just wanna point out that in the preview, it's going to appear instantly, and then disappear correctly. But that's not the case when you run the app. In iOS simulator, you're gonna see that the animation is correct. So the reason why I'm exploring both here is to give you options, but also because this is the correct way to do it when you're using matched geometry effect. Let me resume this. Then again, you can see that when I click first it instantly appear, but when I click multiple times, it runs fine. So that's just to keep in mind with withAnimation correctly. If you want to add the animation timing is gonna be parenthesis, after withAnimation, so dot spring parentheses. Another thing to note is that when you use withAnimation, the timing might be a little bit different. So the speed of the animation versus using dot animation modifier. So with this, you should have a to create a preset animation between screens, and this is gonna work across platform including the Mac and iPad. In the next session, we're gonna use matched geometry effect. And we're gonna be able to compare the difference between having a preset transition versus transitioning shared elements using matched geometry effect. So I'll see you in the next session.