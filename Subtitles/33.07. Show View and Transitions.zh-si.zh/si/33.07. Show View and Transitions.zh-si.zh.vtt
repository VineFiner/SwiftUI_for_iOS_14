WEBVTT

1
00:00:12.610 --> 00:00:13.443
<v 孟>嘿，</v>

2
00:00:13.443 --> 00:00:16.040
欢迎来到我的SwiftUI课程第七课。

3
00:00:16.040 --> 00:00:18.910
今天我们要开始很多有关

4
00:00:18.910 --> 00:00:21.000
匹配的几何的一系列视频。

5
00:00:21.000 --> 00:00:23.370
一路上，我们将学习很多新技术

6
00:00:23.370 --> 00:00:27.230
例如非对称过渡，选择状态，

7
00:00:27.230 --> 00:00:29.250
lazyGrid等。

8
00:00:29.250 --> 00:00:33.710
首先，让我们开始切换到iOS。

9
00:00:33.710 --> 00:00:36.870
我要选择iPhone 11进行预览，

10
00:00:36.870 --> 00:00:38.250
所以点击继续。

11
00:00:38.250 --> 00:00:39.700
不是这里的文字，

12
00:00:39.700 --> 00:00:43.010
我们将把CourseItem放在括号中。

13
00:00:43.010 --> 00:00:45.960
这就是我们先前创建的购物车设计。

14
00:00:45.960 --> 00:00:48.350
现在我们要设定一个固定的框架

15
00:00:48.350 --> 00:00:53.350
因此，点框的宽度为335，高度为250。

16
00:00:55.850 --> 00:00:59.080
现在我们要做的就是点击此购物车

17
00:00:59.080 --> 00:01:02.000
将显示全屏视图。

18
00:01:02.000 --> 00:01:03.040
为了做到这一点，

19
00:01:03.040 --> 00:01:06.260
我们将不得不将此CourseItem放入其中

20
00:01:06.260 --> 00:01:11.260
首先是VStack，然后从VStack更改为ZStack。

21
00:01:11.440 --> 00:01:15.070
这将使我们可以将许多推车彼此

22
00:01:15.070 --> 00:01:16.190
三维地叠放

23
00:01:16.190 --> 00:01:19.970
而不是垂直或水平堆叠。

24
00:01:19.970 --> 00:01:23.110
现在我们要设置新的视图

25
00:01:23.110 --> 00:01:26.460
CourseItem括号，

26
00:01:26.460 --> 00:01:28.280
那么我们要确保这个新视图

27
00:01:28.280 --> 00:01:30.670
默认情况下不显示。

28
00:01:30.670 --> 00:01:32.420
因此，我们将不得不设置一个状态。

29
00:01:33.290 --> 00:01:37.490
状态var show等于false。

30
00:01:37.490 --> 00:01:41.500
然后，我们将为第二个课程项添加一个条件。

31
00:01:41.500 --> 00:01:44.330
让我们先将其包装在VStack中，

32
00:01:44.330 --> 00:01:47.543
并从VStack更改为if show。

33
00:01:48.620 --> 00:01:50.360
每当您更新变量时，

34
00:01:50.360 --> 00:01:52.660
您将不得不恢复预览。

35
00:01:52.660 --> 00:01:54.300
当你这样做的时候

36
00:01:54.300 --> 00:01:58.720
那么默认情况下不会显示全屏。

37
00:01:58.720 --> 00:02:00.360
让我们添加一个点击手势

38
00:02:00.360 --> 00:02:02.570
这样，当我们点击此购物车时，

39
00:02:02.570 --> 00:02:05.410
它会显示全屏。

40
00:02:05.410 --> 00:02:08.323
让我们为ZStack放置所有东西。

41
00:02:09.240 --> 00:02:12.580
所以在ZStack点TapGesture之后，

42
00:02:12.580 --> 00:02:14.350
这是我们要输入的内容

43
00:02:14.350 --> 00:02:17.850
显示圆点切换括号。

44
00:02:17.850 --> 00:02:21.160
这样可以确保我们每次点击购物车时，

45
00:02:21.160 --> 00:02:23.980
它会在真与假之间切换。

46
00:02:23.980 --> 00:02:25.283
让我们点击播放。

47
00:02:26.430 --> 00:02:30.000
现在，当我们点击购物车时，它将切换到完整模式。

48
00:02:30.000 --> 00:02:31.960
再来回。

49
00:02:31.960 --> 00:02:33.940
当然，我们需要过渡，

50
00:02:33.940 --> 00:02:36.683
所以我们可以设置点动画

51
00:02:37.610 --> 00:02:40.980
默认情况下将设置为easeIn，

52
00:02:40.980 --> 00:02:45.560
创建一个简单的淡入淡出动画。

53
00:02:45.560 --> 00:02:48.470
如果您要自定义此过渡，

54
00:02:48.470 --> 00:02:51.130
您将需要放置一个修饰符

55
00:02:51.130 --> 00:02:55.530
在if show内部的第一个父容器上。

56
00:02:55.530 --> 00:02:59.920
因此，让我们进行点过渡。

57
00:02:59.920 --> 00:03:02.380
在这里，如果您输入点号

58
00:03:02.380 --> 00:03:03.910
你有很多选择，

59
00:03:03.910 --> 00:03:06.700
例如不透明度 。

60
00:03:06.700 --> 00:03:08.723
但除此之外，您也可以使用幻灯片。

61
00:03:09.570 --> 00:03:12.050
在这里，它将从左侧滑动，

62
00:03:12.050 --> 00:03:13.670
然后向右移动。

63
00:03:13.670 --> 00:03:15.050
现在，您在这里注意到的是

64
00:03:15.050 --> 00:03:18.160
是当您进行过渡时，

65
00:03:18.160 --> 00:03:21.430
然后突然，手推车滞后于第一个手推车，

66
00:03:21.430 --> 00:03:23.020
那不是我们想要的。

67
00:03:23.020 --> 00:03:25.600
通常，您可以使用zIndex解决此问题，

68
00:03:25.600 --> 00:03:27.920
例如点zIndex。

69
00:03:27.920 --> 00:03:29.840
插入一个值。

70
00:03:29.840 --> 00:03:31.040
但是在这个测试版中

71
00:03:31.040 --> 00:03:34.190
似乎有点问题，

72
00:03:34.190 --> 00:03:36.810
特别是当您单击多次时。

73
00:03:36.810 --> 00:03:40.240
不用担心，我们稍后将进一步探讨zIndex。

74
00:03:40.240 --> 00:03:42.270
但是我找到了一个快速解决方案。

75
00:03:42.270 --> 00:03:44.803
因此，我将删除zIndex，现在将其平滑。

76
00:03:45.830 --> 00:03:49.220
是将if show放在VStack中。

77
00:03:49.220 --> 00:03:53.810
因此，我们用Vstack，花括号，

78
00:03:53.810 --> 00:03:57.370
我将为if语句剪切所有内容

79
00:03:58.320 --> 00:04:00.920
并将其粘贴到VStack中。

80
00:04:00.920 --> 00:04:02.320
如果这样做

81
00:04:02.320 --> 00:04:05.550
那么您的新视图将永远处于最重要的位置。

82
00:04:05.550 --> 00:04:09.323
现在，我们可以探索其他转换，例如缩放。

83
00:04:10.200 --> 00:04:11.863
这就是它的样子。

84
00:04:13.060 --> 00:04:14.730
然后是一个非常有用的

85
00:04:14.730 --> 00:04:18.570
是使用边缘之一移动。

86
00:04:18.570 --> 00:04:22.150
常见的过渡是从尾随

87
00:04:22.150 --> 00:04:24.120
从右边开始，

88
00:04:24.120 --> 00:04:27.110
因此，这是一个从右侧转到的屏幕

89
00:04:27.110 --> 00:04:28.860
然后隐藏起来。

90
00:04:28.860 --> 00:04:32.140
如果您不希望全屏显示受到

91
00:04:32.140 --> 00:04:33.670
在安全区域附近的限制

92
00:04:33.670 --> 00:04:36.080
然后您可以添加一个修饰符

93
00:04:36.080 --> 00:04:40.400
点edgeIgnoringSafeArea点全部。

94
00:04:40.400 --> 00:04:43.070
所以现在您将看到漂亮的全屏模式

95
00:04:43.070 --> 00:04:45.210
从右边滑动。

96
00:04:45.210 --> 00:04:48.850
我们可以改变它来自哪个方向。

97
00:04:48.850 --> 00:04:52.180
底部也很常见，像这样，

98
00:04:52.180 --> 00:04:55.030
几乎像一个模态但没有堆放推车

99
00:04:55.030 --> 00:04:57.320
以及手势。

100
00:04:57.320 --> 00:04:59.420
同时，与模式不同，

101
00:04:59.420 --> 00:05:03.400
这些趋势的添加非常可定制。

102
00:05:03.400 --> 00:05:07.420
我也可以从左起先导。

103
00:05:07.420 --> 00:05:09.390
然后在动画方面，

104
00:05:09.390 --> 00:05:12.790
我们可以更改为easyIn out。

105
00:05:12.790 --> 00:05:14.710
所以这意味着它会很慢

106
00:05:14.710 --> 00:05:17.563
在动画的开头和结尾。

107
00:05:18.460 --> 00:05:22.130
还有更多选项，例如持续时间，延迟，重复，

108
00:05:22.130 --> 00:05:26.020
在之前的课程中，我进行了很多探讨。

109
00:05:26.020 --> 00:05:29.470
现在，让我们专注于弹簧，这真的很整洁，

110
00:05:29.470 --> 00:05:32.460
因为它会反弹一点。

111
00:05:32.460 --> 00:05:36.360
它给我们带来了您在iOS上看到的很多效果。

112
00:05:36.360 --> 00:05:37.660
但我确实要指出

113
00:05:37.660 --> 00:05:40.740
这是设置动画的好方法，

114
00:05:40.740 --> 00:05:43.670
您也可以在操作期间进行操作。

115
00:05:43.670 --> 00:05:48.670
所以在这里我要输入Animation花括号，

116
00:05:49.180 --> 00:05:53.070
我要带上显示点切换。

117
00:05:53.070 --> 00:05:56.580
让我们禁用点动画修改器

118
00:05:56.580 --> 00:05:59.660
并专注于withAnimation。

119
00:05:59.660 --> 00:06:02.640
现在我只想指出在预览中

120
00:06:02.640 --> 00:06:05.280
它会立即出现

121
00:06:05.280 --> 00:06:07.560
然后正确消失。

122
00:06:07.560 --> 00:06:11.010
但是，运行应用程序时并非如此。

123
00:06:11.010 --> 00:06:12.260
在iOS模拟器中，

124
00:06:12.260 --> 00:06:15.290
您会看到动画是正确的。

125
00:06:15.290 --> 00:06:17.940
所以我在这里两个都探索的原因

126
00:06:17.940 --> 00:06:19.110
是给你选择，

127
00:06:19.110 --> 00:06:22.520
也是因为这是正确的方法

128
00:06:22.520 --> 00:06:24.743
当您使用匹配的几何效果时。

129
00:06:25.750 --> 00:06:27.193
让我继续这个。

130
00:06:28.260 --> 00:06:29.093
再说一次

131
00:06:29.093 --> 00:06:31.860
您可以看到，当我第一次单击它时，它会立即出现，

132
00:06:31.860 --> 00:06:35.150
但是当我多次单击时，它运行正常。

133
00:06:35.150 --> 00:06:39.320
所以这只是要正确记住withAnimation。

134
00:06:39.320 --> 00:06:41.420
如果要添加动画时间

135
00:06:41.420 --> 00:06:44.720
在动画之后，将成为括号

136
00:06:44.720 --> 00:06:47.830
点圆括号。

137
00:06:47.830 --> 00:06:51.210
要注意的另一件事是，当您与withAnimation一起使用时，

138
00:06:51.210 --> 00:06:53.900
时间可能会有所不同。

139
00:06:53.900 --> 00:06:55.930
所以动画的速度

140
00:06:55.930 --> 00:06:58.710
与使用点动画修改器相比。

141
00:06:58.710 --> 00:06:59.543
因此，

142
00:06:59.543 --> 00:07:02.110
您应该创建一个

143
00:07:02.110 --> 00:07:03.700
屏幕之间的预设动画，

144
00:07:03.700 --> 00:07:06.040
这将跨平台工作

145
00:07:06.040 --> 00:07:08.420
包括Mac和iPad。

146
00:07:08.420 --> 00:07:10.050
在下一次课程中

147
00:07:10.050 --> 00:07:12.130
我们将使用匹配的几何效果。

148
00:07:12.130 --> 00:07:14.360
我们将能够比较

149
00:07:14.360 --> 00:07:17.170
在预设过渡之间

150
00:07:17.170 --> 00:07:20.140
与过渡共享元素

151
00:07:20.140 --> 00:07:22.360
使用匹配的几何效果的差异。

152
00:07:22.360 --> 00:07:24.253
因此，我将在下次课程上见。

