- [Meng] Hi, welcome back to session eight of my SwiftUI course. So the big animation tool that we have access to for iOS 14 is called matched geometry effect. And this is going to allow us to animate shared elements between two views, seamlessly. To do that, you're going to need to set the matched geometry effect modifier, and we're going to tag the shared elements. In this case, we have the CourseItem, which is exactly the same in the full screen mode. For the first CourseItem, it is very important that you put matched geometry effect modifier before the frame. So dot matchedGeometryEffect, Enter. And here we need to enter an ID and then a NameSpace. For the ID, we're simply going to put a card. And for the NameSpace, we're going to have to declare, Namespace var namespace. So from what I understand the Namespace is where you set a collection of match elements. So, let's put Namespace in the modifier. And then we can just copy this modifier and put that on the second CourseItem in full screen mode. Let's resume this. Click on the card. You see that only the transition out is working correctly. So to solve this issue, we're going to set another property called isSource. And here we want to know which of the cards is the original. So, you can look at the documentation by option clicking and you have a little bit more explanation of what's going on. So we have isSource and what are we going to do here, is to use the show state. So show. And then we want this to be true. So we're going to add exclamation point in front. Now when you click on it, it does that beautiful transition. We just have a bit of an issue with the transition move. So we can change from move to the default opacity instead. And voila, now we have a perfect transition. So from what I understand show is false. So we use an exclamation point to make it true. But at the same time, this has to be the state because in full screen mode, this first card is no longer the source. So therefore this becomes false. And the full screen card becomes the source, which means that now we can switch back and forth, and it transitions beautifully. So this animation is very customizable. So for example, for Course Item in the full screen mode, we're gonna set dot frame after the matched geometry effect, parentheses height of 300. When I do that, it's not gonna take the full height. And what is interesting here is that I can set any type of content that I want in my full screen mode, and matched geometry is going to take care of transitioning between the two CourseItem views. So for example, I can make my full screen to be scrollable. So Command click on CourseItem, let's put this into a Vstack and change from VStack to scroll view. So when you do that, you can see that I'm transitioning, and now I can scroll my content. Just make sure that the edgeIgnoringSafeArea is placed on the scroll view instead. and the same for the transition. So the transition will only work on the first parent container inside the if show statement. Let's add some more content right after the cover, so the CourseItem. We're gonna put CourseRow parentheses, and now it's right here. You can see that the CourseRow is using the opacity transition, while the CourseItem is using matched geometry effect. To make the content scrollable, we're gonna set this repeat. So, Command click, click on Repeat. And instead of maximum five, we're going to set to 20. Now our content is scrollable, which is really awesome. And why don't we add some padding as well. So, Command click for each, put this inside a VStack, and right after the VStack, set dot padding parentheses, awesome. So it's starting to look like a real UI. The animation is cancelable and the content is scrollable. Now back to the topic of animation versus withAnimation. So if I disable withAnimation by commenting and putting back the animation modifier, you're gonna see that the animation is much slower, but at least it works. It doesn't instantly show the transition. But why I said withAnimation is better is because there's a lag. So you can see that when I scroll, the card that is behind is trying to catch up. And so that is less than ideal. When it comes to using marched geometry effect, I believe that for now, it's better to use withAnimation. So I can just delete the dot animation modifier. I know it looks really easy right now, but yes, it's going to get a lot more interesting, especially when you deal with a lot of cards that have to match different elements. Before we move to the next session, we can remove this VStack container because we don't have a back hard problem anymore. So make sure to double click on the curly braces and you know where you can delete it. So, I'm going to delete the end first, and then the beginning after. Let me fix my indentation by selecting the whole thing and control I. In the next session, I want to show you how to create a delay transition so that we have the card showing first, and then the content showing second. So I'll see you in our next session.