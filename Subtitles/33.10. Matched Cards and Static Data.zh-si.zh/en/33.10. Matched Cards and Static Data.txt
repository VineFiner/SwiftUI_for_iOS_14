- [Meng] Hi and welcome to section 10 of my SwiftUI course. So we're gonna start working with static data, meaning that our cards are gonna look more interesting, we're gonna have more cards, and we're gonna make them work with match geometry effect. First of all, we're going to create a new data model file. So command N. Select SwiftUI View. We're gonna call this Course. Make sure to target both macOS and iOS, and that's because data should be the same for all platforms. To create our data model we don't need the UI aspect. We're gonna type struct, Course of type Identifiable, curly braces. We're gonna start with a variable ID, so var id is equal to you UUID parentheses. So this will auto generate a unique ID for every single item so that we can actually use this for match geometry effect. Each card is going to have a title. So var title of type String. Next var subtitle of type String as well, var image of type String, and then finally var color of type Color. Now we're gonna need some sample data. So var courses is equal to array, so square brackets. Let's put it in its own line, and in the middle we're gonna set Course, parentheses. And so this is going to detect the data model, and we can select the one without the id because the id is auto-generated. So double click, and now you can populate the data based on the data type. So String is quotes, the same for image. As for the color, we're gonna use Color parentheses color lit. We're gonna use colorLiteral in order to be able to change the colors really easily. So here I'm gonna paste a bunch of data because it would be a lot of time to type all of them manually. So I'm just gonna paste the whole thing, and feel free to use the text content from this section, or to use your own data, as long as it respects the data model. So you can see we have a title for each card and then the subtitle, the image name, as well as the color. Let's save this and head back to CoursesView. We have one card here and then we have a second card, which is entered manually. The second card can be deleted. And for the first card, we're gonna command click on it and then click on repeat. So normally it just repeats for a number of times. It does not get any data. Instead, we're gonna use the data model. So from the sample data, courses, which means this item is for each card. So let's resume this. Now you can see that we have a problem because every single card is being matched to the full screen because all of them have the same ID. So instead, we're going to replace this ID that was entered manually by item.id, because in our data model, we have the ID that is unique. But the problem now is how do we match this ID to the full screen card? Because if you click on it, there is no shared element transition. So for now, we're gonna do it manually, meaning that instead of having this, that does not match with the item.id we're gonna get from the array courses, and then using an index value, we're going to pick the first card. So square brackets, zero, and at the end .id. What this means is that the full screen card is going to be matched to the first card. So only the first card will be transitioning. If I was to set, let's say two, that means the third card, then this card will be transitioning. That's pretty cool. So let's set it back to zero for now, and let's pass the data to each card. Let's command click on CourseItem, jump to definition. So we're gonna make sure that the data in the CourseItem component is going to be customizable. So right before body, we're gonna set a var course of type Course, which is the data model. And we're gonna have some default value. courses using the index value, so square brackets, zero. Now we're gonna replace each hard-coded values by the data. So course.image for the image. And then for the first text is going to be course.title. The second text, course.subtitle. Then for the background, color.blue, replace it with course.color. And while we're here, let's make the cornerRadius and the shadow a little bit more interesting. For cornerRadius I'm gonna use the smooth corners that you see a lot on iOS. Let's select the whole .cornerRadius and replace it with .clipShape. Inside it RoundedRectangle, parentheses. Select the first option. It's gonna give you cornerRadius. We're gonna set to 22, and the style.continuous. If you resume, you're gonna see that the data has been replaced by your data. And the cornerRadius is now the smooth corners. Finally, we're going to customize our shadow. So right before radius, we're gonna set space and then set color, colon, course.color. And for that color, we're gonna use .opacity parentheses. Set it to 0.3. After the parentheses, add a comma. For the radius, I'm gonna set it to 20, and then X position is going to be zero. Y position is going to be 10. Great, so now I have a contextual drop shadow that is using the background color with a 30% opacity. Now I can go back to CoursesView, and then I can pass to the courseItem component. So inside the parentheses course:item, which is what I'm receiving from this ForEach loop using my array call courses. As for the full screen, inside the parentheses for CourseItem, course: courses, which is the array, square brackets. And I'm only targeting the first card. So now you can see that the data is being populated, including the title, subtitle, illustration, and colors. And on top of that, the transition will work. If you change the index value, so let's say three, which is the fourth card. So one, two, three, and four, you click on it and it has a beautiful transition for that card. Let's put it back to zero for now. In the next session, I wanna show you how to set up a selection state, which means that we will be transitioning every card to the full view card without having to manually select which one we want to transition. I think you're gonna find it interesting, so I'll see you in the next session.