- [Instructor] Hello, welcome to session 11 of my SwiftUI course. In this session, we're going to learn how to apply the transition to every single card separately. Before we start, I just wanna organize my data model here. Previously, we created Course.swift for our data. So we're gonna right click on that file, and then New Group from Selection. We're going to name this one Model. I'm just gonna drag it right after Navigation, but make sure you're not inside the Navigation. After that, let's get back to CoursesView. So, what we wanna do here for the full screen is instead of using the Boolean show, we're just gonna check if there's a selected item. In order to do that, we're gonna have to create a new state. So, state var selected item, which is of type course. And by default, we wanna set it to empty, so nil, like this, if there is no item selected, it's just not going to show the full screen. Now, Swift has something called optional, and optional means that if it's possible that there's no value, then the data needs a question mark to mean optional. So thanks for that, we're gonna be able to go to the if show statement, which is now using a Boolean. And instead, we're gonna ask if the selected item is not nil, which means it's not empty. So, we know that by default, it's going to be empty, which means that it's not gonna show any full screen. Right now it's not gonna do anything because when we tap on a card, it's only toggling the show state. If we go to the tab gesture at the very end, you can see that we're toggling the show state. Now, in addition to doing that, we should also change the selected item to the one being tapped. But right now because we are not inside the loop, we don't know which one is being tapped. So, what we need to do here is to get the onTapGesture modifier. So, all of this modifier, cut, and then put that to the first course item, right after frame. Because of this, every single card is going to have a tab gesture. So now right after show.toggle parentheses, we're going to set selected item is equal to item. Item, meaning the specific data that we're getting from the courses array. Now for the selected item, we're going to replace the one being entered manually by the value that we're getting from the selected item. So, selected item, and here we're getting an error because the value that we need to pass to the component cannot be empty. So, we need to add an exclamation point to mean that we know for sure that selected item is not gonna be empty, otherwise, it wouldn't have passed this condition in the first place. And then we need to do the same for the match symmetry effect ID. So selected item, exclamation point. And that's it. Now, we can tap on any of these cards to go to full screen mode. But now since we have only the tap gesture for going to full screen, we also need the tap gesture for going back. Otherwise, we won't be able to tap back to the cards. So, let's select this whole modifier onTopGesture, and then we're going to Command + C to copy it. Then we're gonna go to the second course item, right after to frame and then paste that onTapGesture. For the selected item, we need to put it back to nil. So, let's test our UI. And here you can see that it's working great. The only issue with the selected item technique is that if you switch between cards too fast, it's not gonna animate well. And that's because the selected item is changing before the animation is over. So, while this selected item technique is very clean, we also need to make sure that during the transition out, we're not gonna be able to select right away to the next item before we finish the animation. For the transition in, it's fine because it's still focusing on a single card. So, let's take care of the transition out. So, we're gonna create a new state at the top state. State var, this is going to be a Boolean, so isDisabled is equal to false by default. So, what we're going to do is to disable the cards while the transition out animation is happening. So let's click resume after setting the state. And then during the onTapGesture, we're going to set isDisable to true, meaning that we will be able to disable the cards. So, using this state, we can add a new modifier for the course item, right after onTapGesture to disabled, and this is a Boolean, which means that we can use our state, so isDisabled. Great. So what should happen is that when we tap on a card, it's going to do the animation, and then we cannot have any more because at this point, everything has been disabled. We just need to enable them back at the right timing. So, let's scroll down and find the auto onTapGesture. Here after selected item, we're gonna set isDisable is equal to false. But you're gonna notice that it's going to happen too fast, and it's not going to solve our issue. Now, what we can do is to add a delay. So, let's set dispatchQueue.main.asyncAfter. And now we're going to set the timing, which is dot now which means now plus 0.3 second. So, this code is a little bit complicated, but it just means that we're gonna wait 0.3 seconds before running the code. So, let's go to the next value and press Enter. And this is where we can put isDisabled is equal to false. So, let me cut that and paste that right here. Now, what should happen is that when I tap here, the cards are disabled. And when I tap back to the cards, it's still going to be disabled, but only for 0.3 second, and again, this depends on the timing of your animation. For me, after a lot of testing and clicking, I noticed that 0.5 works best. So, now we cannot break the UI anymore. Alright, so that's what I wanted to show you today. In the next session, we're going to look into the new Lazy Grid. We're gonna make our layouts so much cooler, and so much more adaptive while still using the same transitions. So I'm pretty excited to show you Lazy Grid in the next session. See you then.