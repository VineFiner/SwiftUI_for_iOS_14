- 选择状态和禁用 如何用可变的状态创建独特的卡片动画 [讲师]大家好 欢迎收看我的 SwiftUI第11课 在这节课上 我们将学习如何将转换 分别应用于每一张卡 在开始之前 我想先在这里组织一下我的数据模型 之前 我们给我们的数据创建了Course.swift 所以我们要右键点击那个文件 然后选择"从选择中建立新组" 我们要把这个命名为Model 我要把它拖到"导航"后面 但千万不能在导航里面 之后 我们回到"课程视图" 那么 我们要给全屏设置的 不是使用布尔值显示 只要看看有没有被选中的项 要做到这一点 我们必须创建一个新的状态 输入 state var selectedItem 类型是Course 默认情况下 我们要设置为空 也就是nil 像这样 如果没有选中的项 就无法显示全屏 现在 Swift有一个叫作"可选"的功能 可选的意思是 如果可能 没有值的话 那么数据就需要一个问号来表示可选 所以多亏了这个功能 我们可以去if show语句 它现在使用的是布尔值 相反 我们要问 如果所选项不是nil 就说明它不是空的 我们知道 默认情况下 它应该是空的 也就是说 它不会显示全屏 现在它不会做任何事 因为当我们点击卡片时 只是在切换显示状态 如果我们去到最后的"点击手势" 你可以看到我们正在切换显示状态 现在 除此之外 我们还应该将所选项改为 被点击的那个 但现在因为我们不在循环指令内 所以我们不知道哪个被点击了 那么 我们在这里要做的 是选中onTapGesture的修饰 选中所有这些修饰 剪切 然后把它放到第一个CourseItem里 就在frame后面 因为有了这个 所以每一张卡片 都会有一个标签手势 现在 就在show.toggle 后面 我们要设置所选项等于项 项 表示我们要从Course队列 得到的具体数据 现在对于所选项 我们要用从所选项中获得的值 来替换 手动输入的那个 输入所选项 这里我们出现了一个错误 因为我们要传递到组件的值 不能为空 所以 我们需要加一个感叹号 来表示我们肯定知道所选项 不会是空的 否则 它一开始就不会通过这个条件 然后我们也要这样 匹配对称效果ID 输入所选项 感叹号 就行了 现在 我们可以点击这些卡片中的任何一张 来进入全屏模式 但现在我们只有进入全屏的 点击手势 我们还需要一个返回的点击手势 否则 我们就无法点击返回卡片了 那么 我们来选中onTopGesture的所有修饰 然后点击"Command+C"来复制它 然后我们前往第二个CourseItem 就在frame后面 然后粘贴onTapGesture 对于所选项 我们需要将其恢复为nil 我们来测试一下我们的用户界面 在这里你可以看到它的效果很好 所选项技术的唯一问题就是 如果你在卡片间切换得太快 动画效果就会不好 这是因为所选项 在动画结束前正在变化 所以 虽然这个所选项技术虽然很简单 但我们还是需要确保在转出中 我们会无法在完成动画之前 马上选择到下一个项 转入 是没问题的 因为它仍然专注于一张卡片 那么 我们来处理一下转出 我们要在上面创建一个新状态 输入 State var 这将是一个布尔值 输入isDisabled 默认情况下等于false 那么 我们要做的是 在动画正在转出时 禁用这些卡片 我们在设置状态后单击恢复 然后在OntapGesture中 我们要把isDisable设为true 意味着我们可以禁用这些卡片 所以 通过这个状态 我们可以为CourseItem添加一个新的修饰 就在OnTapGeasure设置为disabled之后 这是一个布尔值 也就是说我们可以使用我们的状态 输入isDisabled 行了 那么应该发生的是 当我们点击一张卡片时 它会出现动画 然后就没有了 因为此时 一切都被禁用了 我们只需要在适当的时候重新启用它们 那么 我们来向下滚动并找到onTapGesture 在选定项目后 我们将设置为isDisable 等于false 但你会注意到卡片动得太快 这不能解决我们的问题 现在 我们能做的就是添加延迟 我们设置为dispatchQueue.main.asyncAfter. 现在我们要设定时间 现在是.now 也就是现在加上0.3秒 所以 这个代码有点复杂 但这说明我们要等0.3秒 才能开始运行代码 我们转到下一个值并按Enter键 我们可以在这里设置isDisabled等于false 我要把那个剪切粘贴在这里 现在 应该发生的是 当我点击这里时 卡片是禁用的 当我点击返回卡片时 它仍是禁用的 但只有0.3秒 同样 这取决于动画的时间 我经过大量的测试和点击后 发现0.5秒效果最好 这样我们就不会再破坏用户界面了 好了 这就是我今天想给你们演示的 在下一节课上 我们将研究新的Lazy Grid 我们要让我们的布局更酷 更具适应性 同时仍然使用相同的转换 所以我很想 在下一节课上给你们演示Lazy Grid 到时候见