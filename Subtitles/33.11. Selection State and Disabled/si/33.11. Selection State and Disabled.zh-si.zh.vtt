WEBVTT

1
00:00:05.856 --> 00:00:10.856
选择状态和禁用
如何用可变的状态创建独特的卡片动画

2
00:00:12.670 --> 00:00:14.830
[讲师]大家好 欢迎收看我的

3
00:00:14.830 --> 00:00:16.510
SwiftUI第11课

4
00:00:16.510 --> 00:00:17.510
在这节课上

5
00:00:17.510 --> 00:00:20.470
我们将学习如何将转换

6
00:00:20.470 --> 00:00:22.890
分别应用于每一张卡

7
00:00:22.890 --> 00:00:26.600
在开始之前 我想先在这里组织一下我的数据模型

8
00:00:26.600 --> 00:00:30.080
之前 我们给我们的数据创建了Course.swift

9
00:00:30.080 --> 00:00:32.390
所以我们要右键点击那个文件

10
00:00:32.390 --> 00:00:35.309
然后选择"从选择中建立新组"

11
00:00:35.309 --> 00:00:38.153
我们要把这个命名为Model

12
00:00:39.090 --> 00:00:43.510
我要把它拖到"导航"后面

13
00:00:43.510 --> 00:00:46.423
但千万不能在导航里面

14
00:00:47.820 --> 00:00:50.851
之后 我们回到"课程视图"

15
00:00:50.851 --> 00:00:53.620
那么 我们要给全屏设置的

16
00:00:53.620 --> 00:00:56.810
不是使用布尔值显示

17
00:00:56.810 --> 00:01:00.980
只要看看有没有被选中的项

18
00:01:00.980 --> 00:01:04.010
要做到这一点 我们必须创建一个新的状态

19
00:01:04.010 --> 00:01:09.010
输入 state var selectedItem 类型是Course

20
00:01:11.590 --> 00:01:16.020
默认情况下 我们要设置为空 也就是nil

21
00:01:16.020 --> 00:01:18.860
像这样 如果没有选中的项

22
00:01:18.860 --> 00:01:21.610
就无法显示全屏

23
00:01:21.610 --> 00:01:24.010
现在 Swift有一个叫作"可选"的功能

24
00:01:24.010 --> 00:01:26.640
可选的意思是 如果可能

25
00:01:26.640 --> 00:01:28.220
没有值的话

26
00:01:28.220 --> 00:01:32.220
那么数据就需要一个问号来表示可选

27
00:01:32.220 --> 00:01:33.440
所以多亏了这个功能

28
00:01:33.440 --> 00:01:36.390
我们可以去if show语句

29
00:01:36.390 --> 00:01:38.320
它现在使用的是布尔值

30
00:01:38.320 --> 00:01:39.920
相反 我们要问

31
00:01:39.920 --> 00:01:44.920
如果所选项不是nil 就说明它不是空的

32
00:01:45.740 --> 00:01:49.080
我们知道 默认情况下 它应该是空的

33
00:01:49.080 --> 00:01:52.700
也就是说 它不会显示全屏

34
00:01:52.700 --> 00:01:54.750
现在它不会做任何事

35
00:01:54.750 --> 00:01:56.580
因为当我们点击卡片时

36
00:01:56.580 --> 00:01:59.990
只是在切换显示状态

37
00:01:59.990 --> 00:02:04.000
如果我们去到最后的"点击手势"

38
00:02:04.000 --> 00:02:06.860
你可以看到我们正在切换显示状态

39
00:02:06.860 --> 00:02:08.480
现在 除此之外

40
00:02:08.480 --> 00:02:12.050
我们还应该将所选项改为

41
00:02:12.050 --> 00:02:13.580
被点击的那个

42
00:02:13.580 --> 00:02:15.920
但现在因为我们不在循环指令内

43
00:02:15.920 --> 00:02:18.540
所以我们不知道哪个被点击了

44
00:02:18.540 --> 00:02:19.610
那么 我们在这里要做的

45
00:02:19.610 --> 00:02:23.420
是选中onTapGesture的修饰

46
00:02:23.420 --> 00:02:28.200
选中所有这些修饰 剪切

47
00:02:28.200 --> 00:02:31.600
然后把它放到第一个CourseItem里

48
00:02:31.600 --> 00:02:33.460
就在frame后面

49
00:02:33.460 --> 00:02:35.800
因为有了这个 所以每一张卡片

50
00:02:35.800 --> 00:02:37.990
都会有一个标签手势

51
00:02:37.990 --> 00:02:42.360
现在 就在show.toggle 后面

52
00:02:42.360 --> 00:02:47.360
我们要设置所选项等于项

53
00:02:47.470 --> 00:02:49.960
项 表示我们要从Course队列

54
00:02:49.960 --> 00:02:52.800
得到的具体数据

55
00:02:52.800 --> 00:02:55.060
现在对于所选项

56
00:02:55.060 --> 00:02:58.520
我们要用从所选项中获得的值

57
00:02:58.520 --> 00:02:59.967
来替换

58
00:02:59.967 --> 00:03:02.040
手动输入的那个

59
00:03:02.040 --> 00:03:03.283
输入所选项

60
00:03:04.580 --> 00:03:05.740
这里我们出现了一个错误

61
00:03:05.740 --> 00:03:08.400
因为我们要传递到组件的值

62
00:03:08.400 --> 00:03:10.950
不能为空

63
00:03:10.950 --> 00:03:13.490
所以 我们需要加一个感叹号

64
00:03:13.490 --> 00:03:17.490
来表示我们肯定知道所选项

65
00:03:17.490 --> 00:03:19.370
不会是空的 否则

66
00:03:19.370 --> 00:03:23.440
它一开始就不会通过这个条件

67
00:03:23.440 --> 00:03:24.790
然后我们也要这样

68
00:03:24.790 --> 00:03:27.560
匹配对称效果ID

69
00:03:27.560 --> 00:03:30.900
输入所选项 感叹号

70
00:03:30.900 --> 00:03:31.733
就行了

71
00:03:31.733 --> 00:03:34.570
现在 我们可以点击这些卡片中的任何一张

72
00:03:34.570 --> 00:03:36.260
来进入全屏模式

73
00:03:36.260 --> 00:03:39.280
但现在我们只有进入全屏的

74
00:03:39.280 --> 00:03:40.890
点击手势

75
00:03:40.890 --> 00:03:44.000
我们还需要一个返回的点击手势

76
00:03:44.000 --> 00:03:48.040
否则 我们就无法点击返回卡片了

77
00:03:48.040 --> 00:03:52.107
那么 我们来选中onTopGesture的所有修饰

78
00:03:53.940 --> 00:03:57.260
然后点击"Command+C"来复制它

79
00:03:57.260 --> 00:03:59.660
然后我们前往第二个CourseItem

80
00:03:59.660 --> 00:04:01.110
就在frame后面

81
00:04:01.110 --> 00:04:03.880
然后粘贴onTapGesture

82
00:04:03.880 --> 00:04:08.310
对于所选项 我们需要将其恢复为nil

83
00:04:08.310 --> 00:04:10.330
我们来测试一下我们的用户界面

84
00:04:10.330 --> 00:04:13.550
在这里你可以看到它的效果很好

85
00:04:13.550 --> 00:04:16.600
所选项技术的唯一问题就是

86
00:04:16.600 --> 00:04:19.645
如果你在卡片间切换得太快

87
00:04:19.645 --> 00:04:21.810
动画效果就会不好

88
00:04:21.810 --> 00:04:24.360
这是因为所选项

89
00:04:24.360 --> 00:04:28.110
在动画结束前正在变化

90
00:04:28.110 --> 00:04:32.030
所以 虽然这个所选项技术虽然很简单

91
00:04:32.030 --> 00:04:36.350
但我们还是需要确保在转出中

92
00:04:36.350 --> 00:04:38.560
我们会无法在完成动画之前

93
00:04:38.560 --> 00:04:41.920
马上选择到下一个项

94
00:04:41.920 --> 00:04:43.360
转入

95
00:04:43.360 --> 00:04:47.380
是没问题的 因为它仍然专注于一张卡片

96
00:04:47.380 --> 00:04:50.880
那么 我们来处理一下转出

97
00:04:50.880 --> 00:04:54.310
我们要在上面创建一个新状态 输入

98
00:04:54.310 --> 00:04:58.617
State var 这将是一个布尔值 输入isDisabled

99
00:05:00.200 --> 00:05:02.440
默认情况下等于false

100
00:05:02.440 --> 00:05:04.090
那么 我们要做的是

101
00:05:04.090 --> 00:05:05.870
在动画正在转出时

102
00:05:05.870 --> 00:05:09.490
禁用这些卡片

103
00:05:09.490 --> 00:05:12.600
我们在设置状态后单击恢复

104
00:05:12.600 --> 00:05:15.240
然后在OntapGesture中

105
00:05:15.240 --> 00:05:18.130
我们要把isDisable设为true

106
00:05:18.130 --> 00:05:21.570
意味着我们可以禁用这些卡片

107
00:05:21.570 --> 00:05:23.313
所以 通过这个状态

108
00:05:23.313 --> 00:05:26.943
我们可以为CourseItem添加一个新的修饰

109
00:05:26.943 --> 00:05:31.943
就在OnTapGeasure设置为disabled之后

110
00:05:32.610 --> 00:05:33.970
这是一个布尔值

111
00:05:33.970 --> 00:05:36.560
也就是说我们可以使用我们的状态

112
00:05:36.560 --> 00:05:38.900
输入isDisabled 行了

113
00:05:38.900 --> 00:05:41.710
那么应该发生的是 当我们点击一张卡片时

114
00:05:41.710 --> 00:05:43.143
它会出现动画

115
00:05:43.143 --> 00:05:45.820
然后就没有了

116
00:05:45.820 --> 00:05:49.200
因为此时 一切都被禁用了

117
00:05:49.200 --> 00:05:52.710
我们只需要在适当的时候重新启用它们

118
00:05:52.710 --> 00:05:57.190
那么 我们来向下滚动并找到onTapGesture

119
00:05:57.190 --> 00:06:01.590
在选定项目后 我们将设置为isDisable

120
00:06:01.590 --> 00:06:03.840
等于false

121
00:06:03.840 --> 00:06:06.340
但你会注意到卡片动得太快

122
00:06:06.340 --> 00:06:08.840
这不能解决我们的问题

123
00:06:08.840 --> 00:06:11.470
现在 我们能做的就是添加延迟

124
00:06:11.470 --> 00:06:16.470
我们设置为dispatchQueue.main.asyncAfter.

125
00:06:19.970 --> 00:06:22.300
现在我们要设定时间

126
00:06:22.300 --> 00:06:27.300
现在是.now 也就是现在加上0.3秒

127
00:06:27.620 --> 00:06:29.570
所以 这个代码有点复杂

128
00:06:29.570 --> 00:06:33.290
但这说明我们要等0.3秒

129
00:06:33.290 --> 00:06:35.280
才能开始运行代码

130
00:06:35.280 --> 00:06:39.260
我们转到下一个值并按Enter键

131
00:06:39.260 --> 00:06:43.510
我们可以在这里设置isDisabled等于false

132
00:06:43.510 --> 00:06:47.044
我要把那个剪切粘贴在这里

133
00:06:47.044 --> 00:06:50.690
现在 应该发生的是 当我点击这里时

134
00:06:50.690 --> 00:06:52.580
卡片是禁用的

135
00:06:52.580 --> 00:06:54.570
当我点击返回卡片时

136
00:06:54.570 --> 00:06:59.070
它仍是禁用的 但只有0.3秒

137
00:06:59.070 --> 00:07:03.210
同样 这取决于动画的时间

138
00:07:03.210 --> 00:07:06.360
我经过大量的测试和点击后

139
00:07:06.360 --> 00:07:09.690
发现0.5秒效果最好

140
00:07:09.690 --> 00:07:12.593
这样我们就不会再破坏用户界面了

141
00:07:14.940 --> 00:07:17.280
好了 这就是我今天想给你们演示的

142
00:07:17.280 --> 00:07:18.160
在下一节课上

143
00:07:18.160 --> 00:07:21.320
我们将研究新的Lazy Grid

144
00:07:21.320 --> 00:07:23.810
我们要让我们的布局更酷

145
00:07:23.810 --> 00:07:25.430
更具适应性

146
00:07:25.430 --> 00:07:28.030
同时仍然使用相同的转换

147
00:07:28.030 --> 00:07:29.090
所以我很想

148
00:07:29.090 --> 00:07:31.540
在下一节课上给你们演示Lazy Grid

149
00:07:31.540 --> 00:07:32.470
到时候见

