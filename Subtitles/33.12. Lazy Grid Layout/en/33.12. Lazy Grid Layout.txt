- [Meng] Hi, welcome back to section 12 of my SwiftUI course. Today we're gonna cover one of the most exciting updates for SwiftUI this year. So lazy grid for SwiftUI is amazingly comprehensive. It's going to allow you to adapt your layout to any device. And we have many options, such as adaptive, fixed, repeating columns and rows, and we're going to explore all of those things today. So the best way to learn is to demonstrate. All you need to do is to change from VStack to lazy grid. So let me select VStack including parentheses, then we're gonna type LazyVGrid parentheses. So because we're using the VGrid, we're gonna need to specify the columns. And the columns are an array of GridItem parentheses. Right now, nothing much have changed. And that's because we manually set the size of the card to 335 and 250 of height. Let's delete the width. And you're gonna see that it's simply going to take the full width that's available. So if you wanna add spacing between the rows, we're going to set a right after columns, right after the square brackets, comma, spacing, let's set it to 16. What about the padding from the borders? Well, we can set for the LazyVGrid, so double click on the curly braces, and here, you're gonna find before the frame, we're going to set that padding parentheses, and we can put 16. So if you wanna set it to two columns, this is where, because we are inside an array, we can have more grid items, so we can copy GridItem parentheses, add a comma, and add another grid item. Now we have two columns, and you can add more, and more as long as your layout can accommodate. But this is not the most efficient way. What if we can manage to make it perfectly adaptive depending on the size, and not have to repeat multiple times the grid item. So let's delete the last three grid item and just focus on a single one. Let's go inside the parentheses and put dot adaptive parentheses, inside parentheses, minimum column, and we're gonna set it to 160. So what this doing is that it's going to try to fit as many columns as possible as long as the column has a minimum width of 160. If we were to set, let's say, 200, it can only fit a single column, but if it was, let's say 100, it can fit three. And this is great for adaptive layout because it's going to depend on the size of the screen, and we don't need to set how many columns we want manually, it's simply going to automatically set the number of columns for us based on our requirements. Let me put it back to 160. And then after the first parenthesis, comma, I'm gonna set a spacing of 16. So this is the gap value between the columns. Next, what if we set the height to 200, and let's see if the animation still works. And yes, it does. Everything works regardless of how many columns, what the sizes are. And why not test it on the iPad. So let's go to devices and select on iPad Pro 11 inch. Let me just zoom out a little bit, and maximize this. Now you can see that with the iPad, we have a larger screen and four columns, and we didn't have to change anything because thanks to adaptive, it's going to try to fit as many cards as possible with a minimum width of 160. All right, let me format the code a little bit to make it more readable, so we can explore more options. So I'm gonna put the columns on it's own line the same for spacing. And before the end of the parenthesis, I'm going to set it as a new line. For the columns, this is an array, so we can actually put that on its own line as well. Next, what if we wanna have fixed columns? So we just gonna replace adaptive by fixed. And this is where we can set, let's say, 250, and now you can see that there's a single column because it's not adaptive. If you wanna have more columns, we're going to add a comma. We're just gonna copy and paste more columns. And for each column, you can customize the number. So for example, 160 for the second one, as well as for the third and the fourth. So you can really customize the width of each column separately. Moreover, you can customize the spacing between specific columns. So for example, the first one, I want 10, the second one, I one zero. And now you can see the gap after the first card is 10 and after the second card is zero. So this is great if you wanna set, let's say, a table, or a very custom layout, it doesn't have to be cards. Next, I wanna show you another technique that I found quite useful as well. So for the columns, I'm gonna replace the square brackets as well as the content by array parentheses, type repeating. And we can use the auto completion for repeating. We're gonna set dot init, parentheses, and inside parentheses, dot flexible, parentheses. For the count, this is the number of columns. So for example, we can set it to two, or three, and it's going to automatically set those columns. If you wanna set the spacing, go to right after flexible parentheses, comma, spacing, 16. It can also be useful to set a fixed width to let's say 200, and you can see that it's going to center within the flexible width of the column. Okay, so the last thing I wanna show you is how to set a horizontal grid. So instead of LazyVGrid, we're gonna set LazyHGrid. And instead of columns, we're gonna put rows. If you're going to use an HGrid, you should probably set the ScrollView to parentheses dot horizontal. Now the HGrid is going to try to resize your cards based on the height rather than the width. So you might not want to set a fixed height. We can also set two rows instead of three, and you can see that now the layout is scrollable horizontally. Another thing to be aware of is when you go to full screen mode, you're gonna have to deal with a safe area. So you might want to set your ScrollView to dot edgeIgnoringSafeArea to all. And like this, the animation is gonna work fine. All right, so let's put the array of grid items back to adaptive. So let me delete array parentheses, square brackets instead, GridItem, parentheses dot adaptive, parentheses, minimum, I'm gonna set it to, let's say 160. Then after the parentheses, I'm gonna set the spacing to 16 between rows. Notice that when you're using HGrid, it's ordering from top to bottom. And when we're using VGrid, is from left to right. All right, so let's test this on the iPhone. So I iPhone 11 Pro. Now you can see that the layout is scrollable horizontally and the animation still works. All right, so let me put it back to VGrid and change it back to columns, remove the horizontal scroll view. So just delete the parentheses, and also we don't need the edgeIgnoringSafeArea. Now I'm going to put back a frame height of 200. So that's about the lazy grid. It's really adaptive and really powerful. And I think you're gonna have a lot of fun creating grid based layouts with this. All right, so in the next session, I wanna solve this Z index issue. And also I wanna show you how to create a container based transition using multiple matched symmetry effect IDs. And I think it's going to look way cooler than what we have now. So I'll see you in the next session.