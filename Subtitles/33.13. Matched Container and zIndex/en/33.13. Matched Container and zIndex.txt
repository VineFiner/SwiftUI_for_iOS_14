- [Meng] Hey there, welcome to Section 13 of my Swift UI course. So, having a lazyGrid layout, definitely introduce a bunch of issues such as; the selected card being underneath the other cards during transition. Another thing we want to do, is to animate the whole container as it grows in size and show the content and go to full screen mode. Right now, you can see that, the content is just appearing as a whole. So this time we're gonna use two matchedGeometryEffect IDs. First of all, we're going to need to set a container for the CourseItem. So Command click on CourseItem and click on embed in VStack. And for the VStack, we're going to copy the same matchGeometryEffect modifier, and paste it at the end of VStack. Now the difference is, this container is going to have its own ID. Instead of using the item ID, we're going to add a unique name, including the item ID. So let's select item dot id and set double quotes, and then parentheses. And before the parentheses, we're going to do backward slash. So this allows us to mix a string and a variable. So right before the backward slash, we're going to type container. So while keeping the item ID, it's going to allow us to match with the full screen container. But, by adding this string, this can distinguish itself from the other matchedGeometryEffect ID. All right, so let's add a container to the full screen mode as well. I'm going to wrap that around the ScrollView. So, Command click on ScrollView, embed in VStack. This also means that all the modifiers for the ScrollView can be moved to the VStack. So the background, transition, and SafeArea modifiers, can be cut from the ScrollView and paste that for the VStack. Now make sure that you're putting it in the right place by double clicking on the curly braces to know where it ends. And once you have that, we can copy the matchedGeometryEffect modifier, and paste that right after dot background. Now we're going to do the same technique. So selecting selectedItem dot id, put quotes, parentheses, and before the parentheses, backward slash. Then we can type container before that. So what has been causing our card being below every other card, is in fact a transition. Since we're now animating the container, we don't need the delay transition anymore. So we can just remove the dot transition modifier. So if you test this, you're gonna see a beautiful transition of the content expanding, and then retracting. The only issue is that when it retracts, then the content goes underneath. And that's not what we want. So to solve this, we can add a zIndex for the ScrollView that is lower than for the full screen. So let's go to zIndex for the ScrollView, type dot zIndex and type one. Then for the VStack for the full screen mode, we're going to set dot zIndex to two, right after the other modifiers. So now you're gonna see, when I transition out, then the content is still above the other cards. I can also add a cornerRadius for my content to fit more the cornerRadius of the cards. So right after background, I'm going to set dot clipShape. Then put rounded rectangle, parentheses, with cornerRadius of 22 and style continuous. Now I have a really nice transition, and it works perfectly for all cards. By the way, you can play with the spring animation, by going to the first onTapGesture. And here, if you delete dot spring and type it again, you're gonna find auto-completion with more values. So we can set the response to 0.4 dampingFraction to 0.8, and blendDuration. We can set it to zero. Now you're gonna find that it's a little bit faster. So, you can set the response to be lower, to make it faster. And for the damping, if you set the number to be lower, such as 0.5, you're gonna see that it's going to bounce a lot more. You can definitely play with these values. For now, I'm just going to set response to 0.5. For the damping, I'm gonna set it to 0.7, all right? So this looks pretty good. What I need to do now is to add a closeButton instead of tapping on the card to close. Since we're going to reuse this closeButton a lot. I'm going to create a new Swift file, so command N, and then enter for SwiftUI View. closeButton, target iOS and Mac and then create. Let's resume this. And then we're going to replace the text with an image, parentheses, using system names. So SF symbols, quotes, "xmark". I'm going to set a custom size using the dot font dot system. And I'm gonna use size, weight, and design. For the size, 17 weight dot bold. The design, I can just delete it because I don't need it. Next, we're going to set a background color. So background and then color dot black dot opacity, parentheses, 0.6. So let's make the icon to be white. So before the background, we're going to put dot foregroundColor to be dot white. After that, we're gonna set dot padding, dot all and set it to 10. One thing that I found useful is that you can select the image and you can see roughly what is the size of your element. And for the closeButton, I think between 32 and 36 is a pretty good size. Next, we're gonna use dot clipShape and make it into a circle, all right? So now that we have our closeButton component, we can go back to courses view, and we're going to implement it for the full screen. Let's Command click on the VStack, and embed in a VStack. And then we're going to change the VStack into a ZStack, so that we can put the closeButton on top of the full screen. Now we have the VStack, which is the full screen card. And right after zIndex, we're going to use closeButton, parentheses. And then we're going to move the onTapGesture from the CourseItem. So select that modifier and paste that to our closeButton. Great. If we tap on a card, you're gonna see we have a zIndex problem. We're going to have to move the zIndex to the parent container which is now the ZStack. So, let's test the animation. It works perfectly, except that now the closeButton is kind of in the middle. So what you can do, with the ZStack here, is you can align elements inside the ZStack to be at any corner you want within that frame. So let's go to the ZStack, and put parentheses. Alignment, colon, dot topTrailing. Awesome. So now you can see the closeButton is at the top right. We can add a little bit of padding from the right of that closeButton. So, let's go to the closeButton, add dot padding, dot trailing, and we're gonna set it to 16. Perfect. Now you can see our beautiful animation that works on all cards. On top of that, it adapts to any layout that you want, using the lazyGrid. So, our courses view file is starting to get pretty heavy. And we should separate the full screen view to be in its own Swift file. Like this, it's easier to manage the data and reuse that view. But we will need to learn how to pass the nameSpace and the CourseData. So in the next session, we're going to learn how to manage that and make it all work. So I'll see you in the next session.