1
00:00:05,338 --> 00:00:06,171
容器与zIndex对齐

2
00:00:12,620 --> 00:00:13,453
- [孟] 嘿，

3
00:00:13,453 --> 00:00:16,530
欢迎来到我的Swift UI课程的第13节。

4
00:00:16,530 --> 00:00:18,760
因此，拥有一个lazyGrid布局，

5
00:00:18,760 --> 00:00:21,960
肯定会引入一系列问题，例如:

6
00:00:21,960 --> 00:00:25,010
在转换过程中，所选卡

7
00:00:25,010 --> 00:00:26,400
位于其他卡的下方。

8
00:00:26,400 --> 00:00:27,800
我们想做的另一件事是，

9
00:00:27,800 --> 00:00:32,150
随着容器尺寸的增大，动画化整个容器，

10
00:00:32,150 --> 00:00:35,550
显示内容，并进入全屏模式。

11
00:00:35,550 --> 00:00:37,670
现在，你可以看到，

12
00:00:37,670 --> 00:00:40,023
内容只是作为一个整体出现。

13
00:00:41,000 --> 00:00:42,630
所以这一次我们将使用

14
00:00:42,630 --> 00:00:45,580
两个matchedGeometryEffect标识。

15
00:00:45,580 --> 00:00:46,413
首先，

16
00:00:46,413 --> 00:00:49,840
我们需要为CourseItem设置一个容器。

17
00:00:49,840 --> 00:00:51,510
所以命令点击课程项目，

18
00:00:52,420 --> 00:00:55,280
然后点击嵌入VStack。

19
00:00:55,280 --> 00:00:56,740
对于VStack，

20
00:00:56,740 --> 00:01:01,740
我们将复制相同的matchGeometryEffect修改器，

21
00:01:01,960 --> 00:01:05,110
并将其粘贴在VStack的末尾。

22
00:01:05,110 --> 00:01:06,570
不同的是，

23
00:01:06,570 --> 00:01:09,780
这个容器将有自己的标识。

24
00:01:09,780 --> 00:01:11,920
我们将添加一个唯一的名称，

25
00:01:11,920 --> 00:01:16,480
包括项目标识，而不是使用项目标识。

26
00:01:16,480 --> 00:01:21,480
因此，让我们选择项目点id，并设置双引号，

27
00:01:22,710 --> 00:01:24,490
然后括号。

28
00:01:24,490 --> 00:01:26,170
在圆括号前，

29
00:01:26,170 --> 00:01:28,900
我们要输入反斜杠。

30
00:01:28,900 --> 00:01:32,370
这样我们就可以混合字符串和变量。

31
00:01:32,370 --> 00:01:34,690
所以就在反斜杠之前，

32
00:01:34,690 --> 00:01:37,290
我们要输入container。

33
00:01:37,290 --> 00:01:39,600
因此，在保留项目标识的同时，

34
00:01:39,600 --> 00:01:41,800
它将允许我们匹配

35
00:01:41,800 --> 00:01:44,320
全屏container。

36
00:01:44,320 --> 00:01:46,450
但是，通过添加这个字符串，

37
00:01:46,450 --> 00:01:48,640
它可以将自己与

38
00:01:48,640 --> 00:01:51,740
另一个matchedGeometryEffect ID区分开。

39
00:01:51,740 --> 00:01:53,800
好了，让我们也在全屏模式下

40
00:01:53,800 --> 00:01:55,940
添加一个容器。

41
00:01:55,940 --> 00:01:59,200
我将把它包装在ScrollView中。

42
00:01:59,200 --> 00:02:03,500
因此，命令点击ScrollView，嵌入到VStack。

43
00:02:03,500 --> 00:02:07,960
这也意味着ScrollView的所有修改器

44
00:02:07,960 --> 00:02:10,430
都可以移动到VStack。

45
00:02:10,430 --> 00:02:14,610
因此，背景、过渡和安全区域修改器

46
00:02:14,610 --> 00:02:17,330
可以从ScrollView中剪切出来，

47
00:02:17,330 --> 00:02:20,490
然后粘贴到VStack上。

48
00:02:20,490 --> 00:02:23,770
现在确保你把它放在正确的位置，

49
00:02:23,770 --> 00:02:25,820
双击花括号

50
00:02:25,820 --> 00:02:27,853
知道它的结束位置。

51
00:02:29,420 --> 00:02:31,180
一旦你有了这些，

52
00:02:31,180 --> 00:02:35,290
我们就可以复制matchedGeometryEffect修改器，

53
00:02:35,290 --> 00:02:38,563
然后把它粘贴到点背景后面。

54
00:02:39,770 --> 00:02:41,540
现在我们要做同样的技术。

55
00:02:41,540 --> 00:02:44,583
所以选择selectedItem.id，

56
00:02:45,430 --> 00:02:49,550
输入引号，圆括号，在圆括号前，

57
00:02:49,550 --> 00:02:51,070
反斜杠。

58
00:02:51,070 --> 00:02:53,300
然后我们可以在那之前打container。

59
00:02:53,300 --> 00:02:55,580
所以导致我们的卡

60
00:02:55,580 --> 00:03:00,180
低于其他牌的原因，实际上是一个过渡。

61
00:03:00,180 --> 00:03:02,370
由于我们现在正在制作容器的动画，

62
00:03:02,370 --> 00:03:05,060
我们不再需要延迟转换了。

63
00:03:05,060 --> 00:03:09,190
所以我们可以去掉点过渡修改器。

64
00:03:09,190 --> 00:03:10,680
所以如果你测试这个，

65
00:03:10,680 --> 00:03:13,030
你会看到一个美丽的过渡，

66
00:03:13,030 --> 00:03:17,230
内容扩展，然后收缩。

67
00:03:17,230 --> 00:03:20,810
唯一的问题是，当它缩回时，

68
00:03:20,810 --> 00:03:22,970
内容就在下面。

69
00:03:22,970 --> 00:03:25,200
这不是我们想要的。

70
00:03:25,200 --> 00:03:26,620
为了解决这个问题，

71
00:03:26,620 --> 00:03:28,820
我们可以为ScrollView添加一个

72
00:03:28,820 --> 00:03:33,560
低于全屏视图的zIndex。

73
00:03:33,560 --> 00:03:37,100
让我们转到ScrollView的zIndex，

74
00:03:37,100 --> 00:03:40,930
键入.zIndex，然后键入1。

75
00:03:40,930 --> 00:03:44,060
然后对于全屏模式的VStack，

76
00:03:44,060 --> 00:03:48,420
我们将把点zIndex设置为2，

77
00:03:48,420 --> 00:03:50,750
紧接在其他修改器之后。

78
00:03:50,750 --> 00:03:54,560
所以现在你会看到，当我过渡出来的时候，

79
00:03:54,560 --> 00:03:59,200
内容仍然在其他卡片之上。

80
00:03:59,200 --> 00:04:02,640
我还可以为我的内容

81
00:04:02,640 --> 00:04:05,640
添加一个角半径，以更适合卡片的角半径。

82
00:04:05,640 --> 00:04:10,527
所以在背景之后，我将设置.clipShape。

83
00:04:11,840 --> 00:04:16,120
然后输入RoundedRectangle，圆括号，

84
00:04:16,120 --> 00:04:20,800
圆角半径为22，样式为连续。

85
00:04:20,800 --> 00:04:23,350
现在我有了一个非常好的过渡，

86
00:04:23,350 --> 00:04:26,430
它对所有的卡片都非常有效。

87
00:04:26,430 --> 00:04:30,020
顺便说一下，你可以通过第一个onTapGesture

88
00:04:30,020 --> 00:04:33,130
来做春季动画。

89
00:04:33,130 --> 00:04:37,640
在这里，如果你删除.spring并再次输入，

90
00:04:37,640 --> 00:04:42,060
你会发现auto-completion还有更多的值。

91
00:04:42,060 --> 00:04:46,387
因此，我们可以将响应设置为0.4，dampingFraction设置为0.8，

92
00:04:49,020 --> 00:04:50,580
还有blendDuration

93
00:04:50,580 --> 00:04:52,170
我们可以把它设为零。

94
00:04:52,170 --> 00:04:55,470
现在你会发现它快了一点。

95
00:04:55,470 --> 00:05:00,470
因此，您可以将响应设置得更低，以使其更快。

96
00:05:01,010 --> 00:05:02,210
对于damping，

97
00:05:02,210 --> 00:05:05,490
如果你把数值设得更低，比如0.5，

98
00:05:05,490 --> 00:05:08,190
你会看到它会反弹得更多。

99
00:05:10,170 --> 00:05:12,130
你绝对可以多试试这些值。

100
00:05:12,130 --> 00:05:14,633
现在，我将把响应设置为0.5。

101
00:05:15,720 --> 00:05:19,370
对于damping，我会设置为0.7，好吗？

102
00:05:19,370 --> 00:05:21,300
所以这看起来很不错。

103
00:05:21,300 --> 00:05:24,190
我现在需要做的是添加一个关闭按钮，

104
00:05:24,190 --> 00:05:26,550
而不是点击卡片来关闭。

105
00:05:26,550 --> 00:05:29,290
因为我们会经常重复使用这个关闭按钮。

106
00:05:29,290 --> 00:05:31,470
我将创建一个新的Swift文件，

107
00:05:31,470 --> 00:05:36,398
输入command N，然后进入SwiftUI视图。

108
00:05:36,398 --> 00:05:40,960
closeButton，瞄准iOS和Mac，然后创建。

109
00:05:40,960 --> 00:05:42,930
让我们继续。

110
00:05:42,930 --> 00:05:47,930
然后，我们将替换系统名称，用Image、

111
00:05:48,440 --> 00:05:51,080
括号来替换文本。

112
00:05:51,080 --> 00:05:56,040
输入SF符号，引号，"圣诞"。

113
00:05:56,040 --> 00:06:00,100
我将使用.font.system

114
00:06:01,270 --> 00:06:03,210
来设置自定义大小。

115
00:06:03,210 --> 00:06:07,000
我将使用尺寸、重量和设计。

116
00:06:07,000 --> 00:06:11,770
对于尺寸输入17 重量.bold。

117
00:06:11,770 --> 00:06:14,940
设计，我可以删除它，因为我不需要它。

118
00:06:14,940 --> 00:06:17,100
接下来，我们将设置背景颜色。

119
00:06:17,100 --> 00:06:22,100
输入background ，

120
00:06:22,480 --> 00:06:24,503
0.6。

121
00:06:25,940 --> 00:06:28,430
所以让我们把图标变成白色。

122
00:06:28,430 --> 00:06:29,660
所以在背景之前，

123
00:06:29,660 --> 00:06:34,020
我们将输入.foregroundColor为.white。

124
00:06:34,020 --> 00:06:36,673
在那之后，我们将设置.padding，

125
00:06:38,420 --> 00:06:40,993
.all，并将其设置为10。

126
00:06:41,850 --> 00:06:43,240
我发现有用的一点是，

127
00:06:43,240 --> 00:06:44,930
你可以选择图像，

128
00:06:44,930 --> 00:06:48,840
你可以大致看到元素的大小。

129
00:06:48,840 --> 00:06:50,480
对于closeButton，

130
00:06:50,480 --> 00:06:54,600
我认为32到36是一个很好的尺寸。

131
00:06:54,600 --> 00:06:57,960
接下来，我们将使用.clipShape，

132
00:06:57,960 --> 00:07:00,780
使它成为一个圆，好吗？

133
00:07:00,780 --> 00:07:03,800
现在我们有了closeButton组件，

134
00:07:03,800 --> 00:07:05,930
我们可以返回到课程视图，

135
00:07:05,930 --> 00:07:09,660
我们将在全屏模式下实现它。

136
00:07:09,660 --> 00:07:12,340
让我们命令点击VStack，

137
00:07:12,340 --> 00:07:14,750
并嵌入一个VStack。

138
00:07:14,750 --> 00:07:18,000
然后我们将把VStack变成ZStack，

139
00:07:18,000 --> 00:07:19,950
这样我们就可以把

140
00:07:19,950 --> 00:07:21,700
关闭按钮放在全屏的顶部。

141
00:07:21,700 --> 00:07:24,910
现在我们有了VStack，这是一个全屏卡。

142
00:07:24,910 --> 00:07:27,590
在zIndex之后，

143
00:07:27,590 --> 00:07:32,590
我们将输入closeButton，括号。

144
00:07:33,100 --> 00:07:36,230
然后我们将把onTapGesture

145
00:07:36,230 --> 00:07:37,230
从CourseItem中移走。

146
00:07:38,110 --> 00:07:42,930
所以选择那个修改器并粘贴到我们的关闭按钮。

147
00:07:42,930 --> 00:07:43,763
很好。

148
00:07:43,763 --> 00:07:44,650
如果我们点击一张卡片，

149
00:07:44,650 --> 00:07:46,920
你会看到我们有一个zIndex问题。

150
00:07:46,920 --> 00:07:49,960
我们将不得不把zIndex

151
00:07:49,960 --> 00:07:52,723
移动到父容器，也就是现在的ZStack。

152
00:07:53,990 --> 00:07:55,970
那么，让我们测试一下动画。

153
00:07:55,970 --> 00:07:58,010
它工作得很好，

154
00:07:58,010 --> 00:08:02,370
只是现在关闭按钮在中间。

155
00:08:02,370 --> 00:08:05,670
所以你能做的是，在这里，

156
00:08:05,670 --> 00:08:09,020
你能在ZStack中对齐元素，

157
00:08:09,020 --> 00:08:12,690
在那个框架中你想要的任何角落。

158
00:08:12,690 --> 00:08:16,610
所以让我们去ZStack，放上括号。

159
00:08:16,610 --> 00:08:21,343
Alignment，冒号 .topTrailing。

160
00:08:22,740 --> 00:08:23,950
太棒了。

161
00:08:23,950 --> 00:08:26,600
现在你可以看到关闭按钮在右上角。

162
00:08:26,600 --> 00:08:28,540
我们可以在关闭按钮的右边

163
00:08:28,540 --> 00:08:30,743
添加一点填充。

164
00:08:31,700 --> 00:08:33,610
所以，让我们去closeButton，

165
00:08:33,610 --> 00:08:37,900
添加.padding.trailing，

166
00:08:37,900 --> 00:08:40,390
我们要设置它为16。

167
00:08:40,390 --> 00:08:41,280
太好了。

168
00:08:41,280 --> 00:08:43,940
现在你可以看到我们美丽的动画，

169
00:08:43,940 --> 00:08:45,980
适用于所有的卡片。

170
00:08:45,980 --> 00:08:48,900
最重要的是，它可以适应任何你想要的布局，

171
00:08:48,900 --> 00:08:50,610
使用lazyGrid。

172
00:08:50,610 --> 00:08:54,740
因此，我们的课程视图文件开始变得相当重。

173
00:08:54,740 --> 00:08:58,210
我们应该将全屏视图

174
00:08:58,210 --> 00:09:00,220
分离到它自己的Swift文件中。

175
00:09:00,220 --> 00:09:02,940
这样，管理数据和

176
00:09:02,940 --> 00:09:05,070
重用视图就更容易了。

177
00:09:05,070 --> 00:09:08,230
但是我们需要学习如何传递nameSpace

178
00:09:08,230 --> 00:09:09,480
和CourseData。

179
00:09:09,480 --> 00:09:10,690
因此，在下一节课中，

180
00:09:10,690 --> 00:09:12,960
我们将学习如何管理它，

181
00:09:12,960 --> 00:09:14,750
并使其发挥作用。

182
00:09:14,750 --> 00:09:16,573
所以下节课再见。

