- 容器与zIndex对齐

- [孟] 嘿， 欢迎来到我的Swift UI课程的第13节。 因此，拥有一个lazyGrid布局， 肯定会引入一系列问题，例如: 在转换过程中，所选卡 位于其他卡的下方。 我们想做的另一件事是， 随着容器尺寸的增大，动画化整个容器， 显示内容，并进入全屏模式。 现在，你可以看到， 内容只是作为一个整体出现。 所以这一次我们将使用 两个matchedGeometryEffect标识。 首先， 我们需要为CourseItem设置一个容器。 所以命令点击课程项目， 然后点击嵌入VStack。 对于VStack， 我们将复制相同的matchGeometryEffect修改器， 并将其粘贴在VStack的末尾。 不同的是， 这个容器将有自己的标识。 我们将添加一个唯一的名称， 包括项目标识，而不是使用项目标识。 因此，让我们选择项目点id，并设置双引号， 然后括号。 在圆括号前， 我们要输入反斜杠。 这样我们就可以混合字符串和变量。 所以就在反斜杠之前， 我们要输入container。 因此，在保留项目标识的同时， 它将允许我们匹配 全屏container。 但是，通过添加这个字符串， 它可以将自己与 另一个matchedGeometryEffect ID区分开。 好了，让我们也在全屏模式下 添加一个容器。 我将把它包装在ScrollView中。 因此，命令点击ScrollView，嵌入到VStack。 这也意味着ScrollView的所有修改器 都可以移动到VStack。 因此，背景、过渡和安全区域修改器 可以从ScrollView中剪切出来， 然后粘贴到VStack上。 现在确保你把它放在正确的位置， 双击花括号 知道它的结束位置。 一旦你有了这些， 我们就可以复制matchedGeometryEffect修改器， 然后把它粘贴到点背景后面。 现在我们要做同样的技术。 所以选择selectedItem.id， 输入引号，圆括号，在圆括号前， 反斜杠。 然后我们可以在那之前打container。 所以导致我们的卡 低于其他牌的原因，实际上是一个过渡。 由于我们现在正在制作容器的动画， 我们不再需要延迟转换了。 所以我们可以去掉点过渡修改器。 所以如果你测试这个， 你会看到一个美丽的过渡， 内容扩展，然后收缩。 唯一的问题是，当它缩回时， 内容就在下面。 这不是我们想要的。 为了解决这个问题， 我们可以为ScrollView添加一个 低于全屏视图的zIndex。 让我们转到ScrollView的zIndex， 键入.zIndex，然后键入1。 然后对于全屏模式的VStack， 我们将把点zIndex设置为2， 紧接在其他修改器之后。 所以现在你会看到，当我过渡出来的时候， 内容仍然在其他卡片之上。 我还可以为我的内容 添加一个角半径，以更适合卡片的角半径。 所以在背景之后，我将设置.clipShape。 然后输入RoundedRectangle，圆括号， 圆角半径为22，样式为连续。 现在我有了一个非常好的过渡， 它对所有的卡片都非常有效。 顺便说一下，你可以通过第一个onTapGesture 来做春季动画。 在这里，如果你删除.spring并再次输入， 你会发现auto-completion还有更多的值。 因此，我们可以将响应设置为0.4，dampingFraction设置为0.8， 还有blendDuration 我们可以把它设为零。 现在你会发现它快了一点。 因此，您可以将响应设置得更低，以使其更快。 对于damping， 如果你把数值设得更低，比如0.5， 你会看到它会反弹得更多。 你绝对可以多试试这些值。 现在，我将把响应设置为0.5。 对于damping，我会设置为0.7，好吗？ 所以这看起来很不错。 我现在需要做的是添加一个关闭按钮， 而不是点击卡片来关闭。 因为我们会经常重复使用这个关闭按钮。 我将创建一个新的Swift文件， 输入command N，然后进入SwiftUI视图。 closeButton，瞄准iOS和Mac，然后创建。 让我们继续。 然后，我们将替换系统名称，用Image、 括号来替换文本。 输入SF符号，引号，"圣诞"。 我将使用.font.system 来设置自定义大小。 我将使用尺寸、重量和设计。 对于尺寸输入17 重量.bold。 设计，我可以删除它，因为我不需要它。 接下来，我们将设置背景颜色。 输入background ， 0.6。 所以让我们把图标变成白色。 所以在背景之前， 我们将输入.foregroundColor为.white。 在那之后，我们将设置.padding， .all，并将其设置为10。 我发现有用的一点是， 你可以选择图像， 你可以大致看到元素的大小。 对于closeButton， 我认为32到36是一个很好的尺寸。 接下来，我们将使用.clipShape， 使它成为一个圆，好吗？ 现在我们有了closeButton组件， 我们可以返回到课程视图， 我们将在全屏模式下实现它。 让我们命令点击VStack， 并嵌入一个VStack。 然后我们将把VStack变成ZStack， 这样我们就可以把 关闭按钮放在全屏的顶部。 现在我们有了VStack，这是一个全屏卡。 在zIndex之后， 我们将输入closeButton，括号。 然后我们将把onTapGesture 从CourseItem中移走。 所以选择那个修改器并粘贴到我们的关闭按钮。 很好。 如果我们点击一张卡片， 你会看到我们有一个zIndex问题。 我们将不得不把zIndex 移动到父容器，也就是现在的ZStack。 那么，让我们测试一下动画。 它工作得很好， 只是现在关闭按钮在中间。 所以你能做的是，在这里， 你能在ZStack中对齐元素， 在那个框架中你想要的任何角落。 所以让我们去ZStack，放上括号。 Alignment，冒号 .topTrailing。 太棒了。 现在你可以看到关闭按钮在右上角。 我们可以在关闭按钮的右边 添加一点填充。 所以，让我们去closeButton， 添加.padding.trailing， 我们要设置它为16。 太好了。 现在你可以看到我们美丽的动画， 适用于所有的卡片。 最重要的是，它可以适应任何你想要的布局， 使用lazyGrid。 因此，我们的课程视图文件开始变得相当重。 我们应该将全屏视图 分离到它自己的Swift文件中。 这样，管理数据和 重用视图就更容易了。 但是我们需要学习如何传递nameSpace 和CourseData。 因此，在下一节课中， 我们将学习如何管理它， 并使其发挥作用。 所以下节课再见。