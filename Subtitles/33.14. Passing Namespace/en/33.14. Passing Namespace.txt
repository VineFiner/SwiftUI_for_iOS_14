- [Meng] Hi, welcome to section 14 of my SwiftUI course. Today, we're gonna learn how to pass the namespace between views so that we can have the full screen view to be separate from the CoursesView file, like this. Is going to be easier to manage the data, and we can reuse this view in isolation. So, first of all, we're going to create a new file, so Command+N, select SwiftUI View. Let's name it CourseDetail, and we're going to target iOS and macOS. Now, the first thing we're gonna do is to go back to CoursesView and scroll down a little bit to find which part that can be reused as an isolated view. So here, we have the card in full view, and then we have the content, we have the scroll view, and then we have the container with the background. So, if we are to use this view in isolation, we don't really need the close button, and also, you can see that it's attached to the TapGesture, and some of the states and animation that is very specific to this transition, but in term of the layout itself, staring with the container and the scroll view, we can definitely reuse that. So let's cut that, Command+X, and replace that by CourseDetail, parentheses. Then I'm gonna go to CourseDetail, and then replace the text by that chunk of code. Now, we're definitely going to run into a bunch of issues because we are missing variables. So, for example, selectedItem doesn't exist here, the same for the namespace. Now, what we need to do is, from the CoursesView, to pass the data to our component called CourseDetail in term of the course as well as the namespace. Going back to CourseDetail, this is where we're going to set those variables, starting with var course of type Course, and then we're gonna set the default, so easy call to courses array, and then we're gonna set 0 for the first item. Next, we're going to need the namespace in order to make our matchedGeometryEffect still work. So, right after Course, we're going to declare var namespace of type Namespace.ID. Now, with these two variables, we can set them at the correct places. So, for example, course is going to be course, matchedGeometryEffect id is going to be course.id, and the same for the second matchedGeometryEffect, we're going to replace selected item by course without the exclamation point. So this seems to work fine, we're just missing some values here for the preview so that we can make it work at the right side. Now, because the course has a default, you don't have to specify that for the preview, but the namespace, we will need a default. So what we can do here is to set a static variable for the namespace, so let's type @Namespace static var namespace. Then, inside the parentheses of CourseDetail inside the preview, we're going to put namespace: namespace. Awesome. Now, we just need to pass the namespace from CoursesView as well. So here, for CourseDetail, we're going to pass namespace: and then namespace. For the CourseDetail, we should also pass the course, so before namespace, course:, and then we're gonna pass the selected item, so selectedItem! and don't forget the comma. Now, with this, you can resume, and everything should be working like before. And going back to CourseDetail, the preview also works. If you play this, you're gonna see that the scrolling works, and this is as if we have an isolated view. Now, while we're here, we should import the rest of the data for the app. Let's go to Project files. I'm going to open Model. So far, we have already created Course.swift. Now, let's bring the rest of the data so that we don't have to manually create them, and it's very repetitive, so I created them for you. I'm going to drag and drop these files to the model folder. Make sure to have these selected, so Copy items if needed, Create groups, and then iOS and macOS targets, and then finish. When you do that, you're gonna see that we have a bunch of new data model file, including the one that we have created earlier. If you look at the content, these are simple data model with a bunch of sample data, so the same for Download, Livestream, Tutorial, et cetera. So now, I can close this, and go back to CourseDetail. In CourseDetail, I'm going to resume, and then, inside the ForEach loop, we're going to replace the manually-entered 20 items to courseSections, and then I'm going to customize the component by Command clicking it, Jump to Definition. So, what we're going to do is to replace these images, text, and colors by the data. So, first of all, we're going to have to declare var item of type CourseSection, and we're gonna have a default using courseSections, square brackets, 0. So, if you look at the data model for CourseSection, you're gonna see that these are the values that we have, the title, subtitle, logo, and color, and this is the sample data. So let's click on this back arrow to go to the previous file. Otherwise, you can always open the folder and go to CourseRow, and then we're going to resume. For the image, we're going to use the logo, and here, we're not gonna use the SF symbols, which means that we're going to delete systemName. We're just gonna put item.logo. So now, we definitely have a rendering mode problem. Right now, it's using a temp which is .template. We're going to use the original colors, so .original. For the background view, we're going to replace that by item.color. Circle is great, and we can delete foregroundColor because we don't need it anymore. Next, let's replace the text. So, for the first text, we're going to use item.title. For the second text, let's use item.subtitle. Awesome, now, we can put this data inside CourseDetail. So, right now, we have courseSections, we have the correct numbers, but we should pass the data to my component CourseRow. So, item: item, and boom, we have our data. Let's add a divider between those rows. Let's type Divider, parentheses. Awesome, we have a pretty cool UI now. We can go back to courses view, and then test the animation, and boom, it still works perfectly. So this is extremely flexible, and we can replace with real data later on. So I hope you're having fun. In the next session, I want to show you how to create a background blur, and we're going to adapt the UI for iPad and macOS, as well as the navigation, so I'll see you in the next session.