- [孟] 嗨，欢迎来到我的SwiftUI课程的第14节。 今天，我们将学习如何在视图之间传递名称空间 以便我们可以全屏显示 像这样与CoursesView文件分开。 将会更轻松地管理数据， 我们可以独立地重用此视图。 因此，首先，我们将创建一个新文件， 所以按Command + N，选择SwiftUI视图。 我们将其命名为CourseDetail， 并且我们将针对iOS和macOS。 现在，我们要做的第一件事就是回 到CoursesView并向下滚动一点 查找可以作为一个孤立的视图 重复使用的部分。 因此，在这里，我们可以看到全屏卡片， 然后我们有了内容， 我们有滚动视图， 然后我们有带有背景的容器。 因此，如果我们要孤立使用此视图， 我们真的不需要关闭按钮， 而且，您可以看到它已附加 到TapGesture以及某些 特定于此过渡的状态与动画 但就布局本身而言， 从容器和滚动视图开始， 我们绝对可以重用它。 因此，让我们剪切Command + X， 并将其替换为CourseDetail 。 那我要去CourseDetail 然后用这段代码替换文本。 现在，我们肯定会遇到很多问题 因为我们缺少变量。 因此，例如，selectedItem在这里不存在， 命名空间相同。 现在，我们需要做的是在CoursesView中 将数据传递到名为CourseDetail的组件 在课程以及名称空间方面 回到CourseDetail， 这是我们要设置这些变量的地方， 从Course类型的var course开始， 然后我们要设置默认值， 如此轻松地调用课程数组， 然后我们将第一项设置为0。 接下来，我们将需要名称空间 为了使我们的matchedGeometryEffect仍然起作用。 因此，在Course结束后， 我们将声明类型为Namespace.ID的var名称空间。 现在，有了这两个变量， 我们可以将它们设置在正确的位置。 因此，例如，课程必将成为课程， matchGeometryEffect ID将为course.id， 与第二个matchedGeometryEffect相同， 我们将按课程 没有感叹号替换所选项目。 所以这似乎很好用， 我们只是在这里缺少一些预览值 这样我们才能使其在右侧运行。 现在，由于该课程具有默认设置， 您不必为预览指定它， 但在命名空间中，我们将需要一个默认值。 所以我们可以在这里为 命名空间设置一个静态变量，所以让我们输入 @Namespace静态var命名空间。 然后，在括号内 预览中的CourseDetail的 我们将放置命名空间：命名空间。 太棒了 现在，我们只需要 从CoursesView传递名称空间。 所以在这里，对于CourseDetail， 我们将传递命名空间：然后传递命名空间。 对于CourseDetail，我们还应该通过课程， 所以在命名空间之前，当然： 然后我们将传递选定的项目， 所以selectedItem！并且不要忘记逗号。 现在，您可以继续 一切都应该像以前一样工作。 回到CourseDetail， 预览也可以。 如果你试用这个，你会看到 滚动有效， 这就像我们有一个孤立的视图。 现在，当我们在这里时， 我们应该为应用程序导入其余数据。 让我们转到Project文件。 我要打开模型。 到目前为止，我们已经创建了Course.swift。 现在，让我们带走其余数据 这样我们就不必手动创建它们， 这是非常重复的，所以我为您创建了它们。 我要拖放这些文件 到模型文件夹。 确保选择了这些， 因此，如果需要，复制项目，创建组， 然后是iOS和macOS目标，然后完成。 当你这样做的时候，你会看到 我们有一堆新的数据模型文件， 包括我们之前创建的那个。 如果您看内容 这些是带有大量示例数据的简单数据模型， 下载，直播，教程等也是如此。 所以现在我可以关闭这个 然后返回CourseDetail。 在CourseDetail中，我将继续， 然后在ForEach循环中， 我们将替换 手动输入了20个课程的课程， 然后我要自定义组件 通过命令单击它，跳到"定义"。 因此，我们要做的是替换这些图像， 文字和颜色。 因此，首先，我们将必须声明var item 类型为CourseSection，我们将使用默认值 使用courseSections，方括号，0。 因此，如果您查看CourseSection的数据模型， 您将看到这些是我们拥有的值， 标题，副标题，徽标和颜色， 这是样本数据。 所以我们点击这个后退箭头 转到上一个文件。 除此之外，您可以随时打开该文件夹 然后转到CourseRow， 然后我们将继续。 对于图片，我们将使用徽标， 在这里，我们不会使用SF符号， 这意味着我们将删除systemName。 我们只是要放置item.logo。 因此，现在，我们肯定存在渲染模式问题。 目前，它使用的是.template临时文件。 我们将使用原始颜色。 对于背景视图， 我们将用item.color替换它。 圆很棒，我们可以删除前景色 因为我们不再需要它了。 接下来，让我们替换文本。 所以，对于第一个文本， 我们将使用item.title。 对于第二个文本，让我们使用item.subtitle。 太好了，现在，我们可以将这些数据放入CourseDetail中。 所以，现在，我们有课程部分， 我们有正确的数字， 但是我们应该将数据传递给我的组件CourseRow。 因此，item：item，这样，我们有了数据。 让我们在这些行之间添加一个分隔符。 让我们键入Divider，括号。 太好了，我们现在有一个非常酷的UI。 我们可以回到课程视图， 然后测试动画 它仍然可以完美地工作。 所以这非常灵活 我们稍后可以用实际数据替换。 所以我希望你玩得开心。 在下一次课程中，我想向您展示 如何创建背景模糊， 我们将调整用户界面 适合iPad和macOS，以及导航方式， 下次见。