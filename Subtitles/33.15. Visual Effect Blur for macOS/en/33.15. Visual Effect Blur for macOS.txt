- [Meng] Hi, welcome to Swift UI course, section 15. Up until now, we have created a really cool transition between two screens. All of this works great on a preview, but when you run the app to iPhone 11, as well as iPad pro 11 inch, you'll notice that by default, we have the navigation bar that exists here without a title. And that's why we have this big gap here. On top of that, as a rule, we should never have the content bigger than 712, which is the standard that Apple has set for their model. So what we can do here is to set the max width of our container to be 712, and then add a background blur behind it. To make the background blur work for iOS and Mac iOS, we're gonna need two files. So let's go to project files. And in the iOS folder, as well as the macOS folder, we have these files that we have to import. For iOS, we're gonna drag and drop VisualEffectBlur to iOS. Here, we're gonna check iOS. Make sure to have copy items if needed and create groups, and then Finish. Let's do the same for macOS. So drag and drop VisualEffectBlur.swift and drop it to macOS. This time we're gonna check target for macOS. Again, copy items if needed and create groups. Now, the target is very important. If you go to the inspector, you will see here in the first tab, which target this file is available to. And notice that we have the same name for the file, but the content of the file is different for Mac and iOS. So when you build your app for each platform, the project will know exactly which file to use depending on the target. Now, I do want to mention that this code for VisualEffectBlur is made by Apple. You can find the code in the Fruta app that they have shared, and also their license allows for anyone to use their code. So back to Xcode, we're going to preview on the iPad 11 inch. You can see here that the width of the container is more than 712, so we're gonna restrict that. In CoursesView.swift, we're gonna scroll down and we're gonna find the z stack for the full screen mode. And right after zIndex, we're going to put .frame, parentheses, maxWidth: 712. If you do that, you're gonna see that your container is now restricted to this width. But what we would like to do is to add another background and using VisualEffectBlur this time. First of all, we're gonna create another frame. So .frame, maxWidth: .infinity, this will use all available space. And afterwards we're gonna add a background modifier. So .background. And now we can use VisualEffectBlur. So, VisualEffectBlur, parentheses. And that's it. Now you can test and you can see that we have just added a background blur. If you want to fill the whole screen, including the safe area, we can just add after the parentheses, .edgesIgnoringSafeArea to all. So this will fill the safe area as well. Now, please note that you can customize the style of the blur, but that customization will only work for iOS. So if you want to customize the VisualEffectBlur, as well as the navigation bar, we'll need to set up the platform conditions. And we will also need to organize our file here. So let's set mini components. Here, right before the last curly brace, I'm gonna add var fullContent of type some View. Then I'm gonna cut everything from the if selectedItem and its content. So double click on this, you're gonna find that this is the code. And I'm gonna paste it inside fullContent. For fullContent, we'll need to set ViewBuilder. Next, let's do the same for content. So right before fullContent, let's set var content of type some View, curly braces. Then I'm gonna scroll up a little bit to find the ScrollView and the content, plus the zIndex modifier. Select all of this, cut. Paste to content. And then we can reference them from the body inside the z stack. So content, and then after content, fullContent. Now we can scroll down to find the background modifier that has the VisualEffectBlur, cut it. And we're gonna paste that right after full content. So now let's set a platform condition. Right before content, pound if os, iOS. And then after fullContent, pound, else. And then after that, endif. Now we can copy content and fullContent, including the background modifier. And this is where we can customize the blur style for iOS. So for blur style, you can set blur style. And for the value, we have a bunch of options. But the auto-completion might not work correctly at this point. So what we can do is to Command + click on VisualEffectBlur, jump to definition, this will open the Swift file. And you'll find that we have a default style that is system material. So that's the standard blur strength, and it also adapts to dark mode automatically. You can also check the other options by selecting systemMaterial, deleting it, press dot again, and this is where you're gonna find a bunch of options. So we have dark, extra light, light, prominent, et cetera. Now, if you use the system ones, they will adapt to dark mode and light mode. Just to give you an idea, we have systemChrome, Material, Thick, Thin, and UltraThin. So, the thicker it is, the easier it is to read and see the content. And the thinner it is, the more you're gonna see the background. Now we're not gonna change anything here, so I'm just gonna put back systemMaterial, but I just wanted to show you the options, since here the auto-completion might not work correctly. But otherwise, if it works, you're gonna be able to change to any of these options. For example, let's try ultra thin material. And here are you gonna see that the background is a lot more visible. If you set it to systemThickMaterial, you will see that the background is barely visible. The blur style is only available on iOS. So that's why we have to keep using just the parentheses for Mac. Let me set back to systemMaterial. And now we're gonna deal with the navigation bar. First of all, you can set a title. Right after the z stack, let's set .navigation bar Title, set that to Courses. So if you run the app, it's gonna look like this. The problem is the navigation bar will be on top. Just like if we had a tab bar, it will also be on top of the content. And that might not be ideal. What we can do here is to hide the navigation bar, but this will only work for iOS. So we're gonna have to do it for the content for iOS. .navigationBarHidden, set it to true. By doing this, we solve our problem with the spacing for the Close button, but also the title of the nav bar that was on top. Now let's run this for the Mac. On a Mac, you can see that everything works perfectly, including the background blur, the max width of the container and even the animation. But we do have a problem with a safe area, which we can disable. To do that, we're gonna go to course detail. And this is where we're gonna organize in the same way. So let's create var content of type some View, curly braces, cut and paste the VStack, including everything except the safe area modifier. So let me paste this to content and referencing this from the body. After that, we can set the platform condition using pound, if os iOS, pound else, pound endiff. For Mac, we're gonna set just content. So this solves our problem with the nav bar hiding part of the card, but now we have some spacing issue with the close button. But also, we want to make sure that the rounded corners make sense for the Mac as well. So on the Mac, the corner radius needs to fit with the corner radius of the window. So this needs to be about 10 instead of 22. First of all, let's fix the corner radius. Let's go to courses view. We're gonna find the Close button, right here for the fullContent. And for the padding, instead of just setting for the trailing, we're gonna remove trailing and just put 16 inside a parentheses. Now for the corner radius, we're gonna go to the folder call Items, CourseItem. Then right after var course, we're gonna set pound if os, iOS, var cornerRadius of type CGFloat is equal to 22. After that, pound else, pound endif. Let's copy var cornerRadius. And for the Mac, we're gonna set it to 10. Then using this value, we're gonna replace 22 here for the clip shape. So let's put corner radius. That's much better. Now what we should do is to deal with the corner radius of the container. Let's copy this code for the platform condition, including the corner radius, let's go to CourseDetail, and right after namespace, paste that. This time for the Mac, I'm gonna set it to zero. And then using the corner radius value, I'm going to replace the corner radius for clipShape. So cornerRadius. That's much better. We can also remove the corner radius when it is in full screen. So in CourseDetail, for CourseItem, we're gonna add comma, cornerRadius, set it to zero. So now, testing on all platforms, you can see that it looks really good. The same for the iPad and for the iPhone. In the next session, I want to show you how to use size class to detect between a big screen like the iPad, and a smaller screen like the iPhone, so that we can use a tab bar instead. So I'll see you in the next session.