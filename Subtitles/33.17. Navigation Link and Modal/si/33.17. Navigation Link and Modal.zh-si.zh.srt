1
00:00:05,350 --> 00:00:10,175
SwiftUI 2 导航链接和模态 通过导航链接和模态呈现内容，关闭行为

2
00:00:12,570 --> 00:00:16,325
- 大家好，欢迎来到我的SwiftUI课程第17节课

3
00:00:16,325 --> 00:00:20,583
今天，我们将学习如何在应用设置更高级的导航

4
00:00:20,583 --> 00:00:23,133
现在，如果点击任何这些会话

5
00:00:23,133 --> 00:00:24,360
并不会执行任何操作

6
00:00:24,360 --> 00:00:26,623
我们有自定义过渡

7
00:00:26,623 --> 00:00:30,859
但我们想通过使用模态或

8
00:00:30,859 --> 00:00:35,846
默认滑动导航来导航至这些会话

9
00:00:36,870 --> 00:00:41,375
稍微向下滑动，找到与这相符的内容

10
00:00:43,180 --> 00:00:45,210
在Latest sections后

11
00:00:45,210 --> 00:00:47,490
你会找到LazyVGrid

12
00:00:47,490 --> 00:00:50,640
按Command键并点击course row

13
00:00:50,640 --> 00:00:55,640
选择Embed in VStack，将Vstack改成NavigationLink

14
00:00:57,470 --> 00:01:01,740
添加括号，输入destination

15
00:01:01,740 --> 00:01:06,390
我们将设置CourseDetail

16
00:01:06,390 --> 00:01:10,210
CourseDetail需要一个命名空间

17
00:01:10,210 --> 00:01:14,830
在CourseView，有命名空间

18
00:01:14,830 --> 00:01:17,740
它附加于这个过渡

19
00:01:17,740 --> 00:01:19,800
为满足这一要求

20
00:01:19,800 --> 00:01:22,380
我们需要创建另一个命名空间

21
00:01:22,380 --> 00:01:26,950
输入namespace，var namespace2

22
00:01:28,430 --> 00:01:32,520
然后，返回到导航链接

23
00:01:32,520 --> 00:01:37,496
在这里，输入namespace: namespace2

24
00:01:37,496 --> 00:01:40,710
很好

25
00:01:40,710 --> 00:01:43,570
恢复预览，稍微向下滚动

26
00:01:43,570 --> 00:01:45,745
你将发现这些都变灰了

27
00:01:45,745 --> 00:01:48,100
因为需要导航视图

28
00:01:48,100 --> 00:01:52,070
预览才可运行导航链接

29
00:01:52,070 --> 00:01:57,070
在这个情况，它可用于边栏或选项卡栏

30
00:01:57,100 --> 00:01:59,630
我们不将它添加至课程视图中

31
00:01:59,630 --> 00:02:02,870
是因为我们不想要重复导航视图

32
00:02:02,870 --> 00:02:06,600
我们必须直接在设备测试它

33
00:02:06,600 --> 00:02:11,150
当你运行应用时，它包含带有导航视图的选项卡栏

34
00:02:11,150 --> 00:02:14,520
因此，导航链接也能运行

35
00:02:14,520 --> 00:02:18,220
点击时，会执行默认过渡

36
00:02:18,220 --> 00:02:20,770
可以滑动和返回

37
00:02:20,770 --> 00:02:25,415
导航链接，就像一个能为你的内容着色的按钮

38
00:02:25,415 --> 00:02:28,440
因此，你将为文本设置颜色

39
00:02:28,440 --> 00:02:31,090
如果是我们已经做了的图像

40
00:02:31,090 --> 00:02:33,770
则将它设为renderingMode

41
00:02:33,770 --> 00:02:38,170
回到课程视图，现在按住Command键点按CourseRow

42
00:02:38,170 --> 00:02:41,880
跳至Definition，对于Title

43
00:02:41,880 --> 00:02:46,880
我们把.ForegroundColor设为.primary

44
00:02:47,870 --> 00:02:50,860
如果你未进行设置

45
00:02:50,860 --> 00:02:53,010
这是默认设置的颜色

46
00:02:53,010 --> 00:02:57,360
如果你使用导航链接

47
00:02:57,360 --> 00:03:00,510
得自行设置主要颜色

48
00:03:00,510 --> 00:03:03,030
换言之，这是系统颜色

49
00:03:03,030 --> 00:03:07,160
LightMode是黑色，DarkMode是白色

50
00:03:07,160 --> 00:03:10,240
对于次要颜色，LightMode和DarkMode

51
00:03:10,240 --> 00:03:12,360
都是不同色调的灰色

52
00:03:12,360 --> 00:03:14,210
对于模态演示

53
00:03:14,210 --> 00:03:16,900
我们将前往CourseDetail

54
00:03:16,900 --> 00:03:18,923
让我们恢复预览

55
00:03:20,420 --> 00:03:23,500
然后，选择CourseRow

56
00:03:23,500 --> 00:03:27,560
添加一个称为.sheet的新修饰符

57
00:03:27,560 --> 00:03:32,560
在第二个选项，你将找到Presented.Content

58
00:03:32,950 --> 00:03:37,700
因此，isPresented是布尔值，Content是目标

59
00:03:37,700 --> 00:03:41,120
现在在endif后设置布尔值

60
00:03:41,120 --> 00:03:45,735
输入State var ShowModal = false

61
00:03:45,735 --> 00:03:48,250
这是默认情况

62
00:03:48,250 --> 00:03:50,860
然后，回到Sheet修饰符

63
00:03:50,860 --> 00:03:54,880
我们将把Is Presented设为showModal

64
00:03:54,880 --> 00:03:58,120
别忘了在它前方要加$符号

65
00:03:58,120 --> 00:04:00,720
这意味着它是绑定的

66
00:04:00,720 --> 00:04:02,840
对于Content，我们能这样写

67
00:04:02,840 --> 00:04:06,610
或者我们能移除逗号、内容和大括号

68
00:04:06,610 --> 00:04:10,800
并将大括号放在括号后方

69
00:04:11,670 --> 00:04:15,140
我们将目标设为CourseList

70
00:04:15,140 --> 00:04:17,630
接下来，我们将设置动作

71
00:04:17,630 --> 00:04:22,363
在.sheet后设置.onTopGesture

72
00:04:23,410 --> 00:04:25,342
再次，我们能删除挂号

73
00:04:25,342 --> 00:04:29,090
让它看起来更简洁，添加大挂号

74
00:04:29,090 --> 00:04:34,090
将ShowModal设为=true

75
00:04:34,570 --> 00:04:37,780
现在，如果你恢复预览，点击播放

76
00:04:37,780 --> 00:04:41,180
由于模态不需要导航视图

77
00:04:41,180 --> 00:04:44,000
点击每个课程行

78
00:04:44,000 --> 00:04:45,960
即可测试它

79
00:04:45,960 --> 00:04:49,660
这是默认行为，你能滚动

80
00:04:49,660 --> 00:04:53,700
或从顶端向下滑动，以关闭它

81
00:04:53,700 --> 00:04:57,790
请注意，它在设备中看起来稍有不同

82
00:04:57,790 --> 00:05:01,930
如果你进入全屏模式，点击课程行

83
00:05:01,930 --> 00:05:05,480
它将显示模态，下方背景为黑色

84
00:05:05,480 --> 00:05:06,942
另一件需要注意的事是

85
00:05:06,942 --> 00:05:08,860
如果你使用模态

86
00:05:08,860 --> 00:05:11,850
必须要留意圆角半径

87
00:05:11,850 --> 00:05:16,518
要解决这一问题，我们能将iOS圆角半径

88
00:05:16,518 --> 00:05:19,883
设为10，而不是22

89
00:05:22,080 --> 00:05:24,420
接下来，我要向你展示如何使用

90
00:05:24,420 --> 00:05:26,000
关闭按钮关闭这个模态

91
00:05:26,000 --> 00:05:28,070
首先，我们将创建一个新视图

92
00:05:28,070 --> 00:05:31,690
按Command + N，创建一个新的SwiftUI文件

93
00:05:31,690 --> 00:05:33,540
选择SwiftUI视图

94
00:05:33,540 --> 00:05:37,760
我们将把它命名为CourseSectionDetail

95
00:05:37,760 --> 00:05:40,163
目标为iOS和mac操作系统

96
00:05:41,970 --> 00:05:44,350
让我展示预览

97
00:05:44,350 --> 00:05:47,080
首先，我将创建关闭按钮

98
00:05:47,080 --> 00:05:49,780
CloseButton

99
00:05:49,780 --> 00:05:52,050
我将把它放在右上角

100
00:05:52,050 --> 00:05:55,400
按Command点击它，选择Embed in Vstack

101
00:05:55,400 --> 00:05:57,623
将它设为ZStack

102
00:05:58,740 --> 00:06:03,740
然后添加挂号，Alignment:.topTrailing

103
00:06:06,330 --> 00:06:08,837
这不会执行任何操作

104
00:06:08,837 --> 00:06:11,000
因为Zstack的大小是如此大

105
00:06:11,000 --> 00:06:15,040
就如Vstack一样，对齐适用于

106
00:06:15,040 --> 00:06:16,960
相互关联的项

107
00:06:16,960 --> 00:06:21,040
现在，我将在CloseButton前添加一些内容

108
00:06:21,040 --> 00:06:25,500
先输入CourseItem

109
00:06:25,500 --> 00:06:28,690
由于CourseItem会占据全屏

110
00:06:28,690 --> 00:06:32,270
关闭按钮会对齐这个空间

111
00:06:32,270 --> 00:06:37,270
对于CourseItem，我将设置一个高度为300的框架

112
00:06:37,560 --> 00:06:42,560
我会将圆角半径设为0

113
00:06:42,640 --> 00:06:46,830
然后，我先将这个CourseItem放入Vstack

114
00:06:46,830 --> 00:06:49,563
接下来，将VStack改为ScrollView

115
00:06:50,680 --> 00:06:53,190
然后，我将输入一段文本

116
00:06:53,190 --> 00:06:58,190
先输入Text，按Command点击Text

117
00:06:58,740 --> 00:07:00,050
选择Embed in Vstack

118
00:07:00,050 --> 00:07:04,980
对于文本，我将复制粘贴我的文本内容

119
00:07:04,980 --> 00:07:07,890
你可以从设计代码页获得这段文本

120
00:07:07,890 --> 00:07:12,460
我将在Vstack的最后，大挂号之后

121
00:07:12,460 --> 00:07:16,520
添加一个修饰符，padding

122
00:07:16,520 --> 00:07:21,520
对于VStack，我将添加挂号

123
00:07:21,600 --> 00:07:26,600
Alignment:.leading, 将spacing设为30

124
00:07:28,930 --> 00:07:30,680
稍微往下滑动

125
00:07:30,680 --> 00:07:32,170
找到CloseButtton

126
00:07:32,170 --> 00:07:34,030
添加padding

127
00:07:34,030 --> 00:07:36,320
padding

128
00:07:36,320 --> 00:07:40,770
要关闭模态，我们将设置环境变量

129
00:07:40,770 --> 00:07:45,310
在body前，我们将输入@Environment挂号

130
00:07:45,310 --> 00:07:49,903
\.presentationMode

131
00:07:52,240 --> 00:07:56,240
然后，输入var presentationMode

132
00:07:56,240 --> 00:08:00,490
返回至底部，在CloseButton下方

133
00:08:00,490 --> 00:08:03,200
我们将设置onTapGesture

134
00:08:03,200 --> 00:08:05,768
再次，我们能删除它

135
00:08:05,768 --> 00:08:08,592
仅保留大挂号

136
00:08:08,592 --> 00:08:13,592
输入presentationMode.wrappedValue.dismiss

137
00:08:14,350 --> 00:08:17,460
很好，现在我们能回到CourseDetail

138
00:08:17,460 --> 00:08:20,870
我们不会称之为CourseList

139
00:08:20,870 --> 00:08:24,630
而会使用CourseSectionDetail

140
00:08:24,630 --> 00:08:27,210
现在，如果你在设备测试它

141
00:08:27,210 --> 00:08:30,040
就能看见其效果，我们将前往模态

142
00:08:30,040 --> 00:08:31,390
一切都能顺利操作

143
00:08:31,390 --> 00:08:34,700
关闭按钮也能运作，很棒

144
00:08:34,700 --> 00:08:38,430
对于Mac，有两点你需要注意

145
00:08:38,430 --> 00:08:40,330
返回到CourseView

146
00:08:40,330 --> 00:08:42,540
我们将找到NavigationLink

147
00:08:42,540 --> 00:08:44,810
如果你在Mac测试这

148
00:08:44,810 --> 00:08:47,210
让我选择这，然后运行

149
00:08:47,210 --> 00:08:50,570
对于测试版，导航链接有小缺陷

150
00:08:50,570 --> 00:08:52,550
它有自己的样式

151
00:08:52,550 --> 00:08:54,440
与其使用导航链接

152
00:08:54,440 --> 00:08:57,880
我会使用我们之前学到的过渡预设

153
00:08:57,880 --> 00:09:01,820
或自定义过渡，方法是添加matchedGeometryEffect

154
00:09:01,820 --> 00:09:06,637
现在，我们将设置一个条件，输入#if os

155
00:09:08,420 --> 00:09:12,923
然后输入else，还有endif

156
00:09:13,920 --> 00:09:17,490
对于Mac，我们不会使用导航链接

157
00:09:17,490 --> 00:09:21,640
复制粘贴CourseRow，下一个问题是模态

158
00:09:21,640 --> 00:09:23,380
当你进入全屏模式时

159
00:09:23,380 --> 00:09:25,330
点击其中一行

160
00:09:25,330 --> 00:09:29,020
模态宽度将使用所有可用的空间

161
00:09:29,020 --> 00:09:31,950
因此，你得限制宽度和高度

162
00:09:31,950 --> 00:09:35,030
让我们回到CourseSectionDetail

163
00:09:35,030 --> 00:09:37,450
滚动到最顶端

164
00:09:37,450 --> 00:09:40,440
我们将把body改为content

165
00:09:40,440 --> 00:09:44,720
在content前，我们将创建var body

166
00:09:44,720 --> 00:09:47,770
或输入some View大挂号

167
00:09:47,770 --> 00:09:50,700
因为首先加载的是body

168
00:09:50,700 --> 00:09:53,450
在大挂号里，我们将输入content

169
00:09:53,450 --> 00:09:56,350
我们也将设置平台条件

170
00:09:56,350 --> 00:10:01,350
在content之前，输入#if OS

171
00:10:01,876 --> 00:10:04,467
else endif

172
00:10:05,600 --> 00:10:10,553
对于Mac，我们将输入content，添加frame修饰符

173
00:10:15,850 --> 00:10:18,630
很棒，现在我们将前往模态

174
00:10:18,630 --> 00:10:21,453
它的宽度和高度将是800x600

175
00:10:22,830 --> 00:10:23,810
在下一节课

176
00:10:23,810 --> 00:10:27,580
我将向你展示如何在这个全屏动画下方

177
00:10:27,580 --> 00:10:31,558
设置导航栏和选项卡栏

178
00:10:31,558 --> 00:10:36,450
这样我们不必在这里设置自定义大标题

179
00:10:36,450 --> 00:10:39,300
我们能使用导航栏

180
00:10:39,300 --> 00:10:41,460
对于iPhone也是这样

181
00:10:41,460 --> 00:10:44,360
内容将在选项卡栏上方

182
00:10:44,360 --> 00:10:46,410
这样看起来更美观

183
00:10:46,410 --> 00:10:48,580
下节课见

